import os
import threading
import asyncio
import random
import re
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes
)

# -----------------------
# üîë  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# -----------------------
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

OWNER_ID = 8486672898
LOG_CHANNEL_ID = -1003107269526
bot_active = True
last_messages = {}

# -----------------------
# –§—Ä–∞–∑—ã
# -----------------------
LOVE_PHRASES = [
    "–¢—ã –º–æ–π —Å–≤–µ—Ç –¥–∞–∂–µ –≤ —Å–∞–º—ã–π —Ç—ë–º–Ω—ã–π –¥–µ–Ω—å üí´",
    "–° —Ç–æ–±–æ–π –≤—Å—ë –∫–∞–∂–µ—Ç—Å—è –ø—Ä–æ—â–µ üíû",
    "–¢—ã –∑–∞—Å—Ç–∞–≤–ª—è–µ—à—å –º–∏—Ä —Å–∏—è—Ç—å üåπ",
    "–° —Ç–æ–±–æ–π –¥–∞–∂–µ —Ç–∏—à–∏–Ω–∞ –∑–≤—É—á–∏—Ç –∫–∞–∫ –º—É–∑—ã–∫–∞ üíñ",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–º ‚ú®",
    "–¢—ã ‚Äî –º–æ–π —É—é—Ç –∏ –ø–æ–∫–æ–π üíê",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ ‚Äî –º–æ—ë —É—Ç—Ä–æ üå∏",
    "–¢—ã ‚Äî –ø—Ä–∏—á–∏–Ω–∞ –º–æ–µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è üíò",
]
SPECIAL_PHRASES = [
    "–°—É–¥—å–±–∞ —è–≤–Ω–æ —á—Ç–æ-—Ç–æ –∑–∞–º—ã—à–ª—è–µ—Ç –º–µ–∂–¥—É –≤–∞–º–∏ üíû",
    "–ö–æ–≥–¥–∞ –≤—ã —Ä—è–¥–æ–º, –¥–∞–∂–µ –≤—Ä–µ–º—è –∑–∞–º–∏—Ä–∞–µ—Ç ‚è≥",
    "–î–≤–∞ —Å–µ—Ä–¥—Ü–∞, –æ–¥–Ω–æ –±–∏–µ–Ω–∏–µ üí´",
]
LOVE_JOKES = [
    "–¢—ã –∫–∞–∫ Wi-Fi ‚Äî —Ä—è–¥–æ–º, –∏ –≤—Å—ë –∏–¥–µ–∞–ª—å–Ω–æ üòÑ",
    "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –±–∞—Ç–∞—Ä–µ—è —Å–∞–¥–∏—Ç—Å—è, –∞ —Ç–µ–±–µ –≤—Å—ë —Ä–∞–≤–Ω–æ ‚ù§Ô∏è‚Äçüî•"
]
LOVE_LEVELS = [
    (0, 10, "üíî –õ—ë–¥ –º–µ–∂–¥—É —Å–µ—Ä–¥—Ü–∞–º–∏..."),
    (11, 25, "üåßÔ∏è –ï–¥–≤–∞ –∑–∞–º–µ—Ç–Ω–∞—è –∏—Å–∫—Ä–∞"),
    (26, 45, "üí´ –°–∏–º–ø–∞—Ç–∏—è —Ä–∞—Å—Ç—ë—Ç"),
    (46, 65, "üíû –ù–µ–∂–Ω–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ"),
    (66, 80, "üíñ –°–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ —É–Ω–∏—Å–æ–Ω"),
    (81, 95, "üíò –≠—Ç–æ –ø–æ—á—Ç–∏ –ª—é–±–æ–≤—å"),
    (96, 100, "üíç –°—É–¥—å–±–∞ —Å–≤—è–∑–∞–ª–∞ –≤–∞—Å –Ω–∞–≤—Å–µ–≥–¥–∞"),
]
GIFTS_ROMANTIC = ["üíê –ë—É–∫–µ—Ç –Ω–µ–∂–Ω–æ—Å—Ç–∏", "üç´ –®–æ–∫–æ–ª–∞–¥ –∏–∑ —á—É–≤—Å—Ç–≤"]
GIFTS_FUNNY = ["üçï –ü–∏—Ü—Ü–∞ –ª—é–±–≤–∏", "üçü –ö–∞—Ä—Ç–æ—à–∫–∞ —Å —Å–æ—É—Å–æ–º —Å–∏–º–ø–∞—Ç–∏–∏"]

# -----------------------
# –ú–∏–Ω–∏-–≤–µ–±—Å–µ—Ä–≤–µ—Ä (Render)
# -----------------------
def run_web():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"LoveBot is alive üíñ")
    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), Handler).serve_forever()

threading.Thread(target=run_web, daemon=True).start()

# -----------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# -----------------------
async def send_log(context: ContextTypes.DEFAULT_TYPE, text: str):
    try:
        if context and context.bot:
            await context.bot.send_message(chat_id=LOG_CHANNEL_ID, text=text)
    except Exception:
        print("LOG:", text)

# -----------------------
# on/off bot
# -----------------------
async def onbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
        return
    bot_active = True
    await update.message.reply_text("üîî –ë–æ—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω!")
    await send_log(context, "–ë–æ—Ç –≤–∫–ª—é—á—ë–Ω.")

async def offbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
        return
    bot_active = False
    await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã.")
    await send_log(context, "–ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω.")

# -----------------------
# /love ‚Äî –≤–∞—É-—ç—Ñ—Ñ–µ–∫—Ç ‚ù§Ô∏è
# -----------------------
async def love_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return
    if not bot_active:
        return

    try:
        args = update.message.text.split(maxsplit=1)
        initiator = update.effective_user.username or update.effective_user.first_name
        target = args[1].replace("@", "") if len(args) > 1 else initiator

        score = random.randint(0, 100)
        bar_len = 20
        filled = score * bar_len // 100
        hearts = "‚ù§Ô∏è" * (filled // 2)
        bars = hearts + "üñ§" * (bar_len - len(hearts))

        # —à–∞–≥ 1
        await update.message.reply_text("üíò –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª—é–±–≤–∏...")
        await asyncio.sleep(0.6)

        # —à–∞–≥ 2
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=random.choice([
                "‚ú® –°—É–¥—å–±–∞ —Å–æ–µ–¥–∏–Ω—è–µ—Ç —Å–µ—Ä–¥—Ü–∞...",
                "üíû –õ—é–±–æ–≤—å –≤–∏—Ç–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ...",
                "üåπ –°–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤—Å—ë —á–∞—â–µ...",
                "üî• –ú–µ–∂–¥—É –≤–∞–º–∏ –∏—Å–∫—Ä–∞...",
            ])
        )
        await asyncio.sleep(0.7)

        # —à–∞–≥ 3
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üíû @{initiator} üíñ @{target}\nüíò –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {score}%\n[{bars}]"
        )
        await asyncio.sleep(0.6)

        # —à–∞–≥ 4 ‚Äî —Ñ–∏–Ω–∞–ª
        category = next((lbl for (lo, hi, lbl) in LOVE_LEVELS if lo <= score <= hi), "üíû –ù–µ–∂–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞")
        phrase = random.choice(LOVE_PHRASES + LOVE_JOKES + SPECIAL_PHRASES)
        final = (
            f"üå∏ *{category}*\n\n"
            f"üí¨ {phrase}\n\n"
            f"üí´ –ò—Å—Ç–∏–Ω–Ω–∞—è –ª—é–±–æ–≤—å –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥—ë—Ç –ø—É—Ç—å üíû"
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=final,
            parse_mode="Markdown"
        )

        await send_log(context, f"/love: @{initiator} -> @{target} = {score}%")

    except Exception as e:
        print("–û—à–∏–±–∫–∞ /love:", e)
        await send_log(context, f"–û—à–∏–±–∫–∞ /love: {e}")

# -----------------------
# /gift ‚Äî –ø–æ–¥–∞—Ä–∫–∏
# -----------------------
async def gift_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return
    if not bot_active:
        return

    args = update.message.text.split(maxsplit=1)
    if len(args) < 2:
        await update.message.reply_text("üéÅ –ò—Å–ø–æ–ª—å–∑—É–π: /gift @username")
        return

    giver = update.effective_user.username or update.effective_user.first_name
    target = args[1].replace("@", "")
    gift = random.choice(GIFTS_ROMANTIC if random.choice([True, False]) else GIFTS_FUNNY)

    await update.message.reply_text(f"üéÅ @{giver} –¥–∞—Ä–∏—Ç @{target} –ø–æ–¥–∞—Ä–æ–∫:\n{gift}")
    await send_log(context, f"/gift: @{giver} -> @{target} ({gift})")

# -----------------------
# /all ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞
# -----------------------
async def all_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return
    text = re.sub(r'^/all\s+', '', update.message.text, flags=re.I).strip()
    if not text:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç: /all <—Ç–µ–∫—Å—Ç>")
        return
    count = 0
    for chat_id in list(last_messages.keys()):
        try:
            await context.bot.send_message(chat_id=chat_id, text=text)
            count += 1
            await asyncio.sleep(0.02)
        except Exception:
            continue
    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {count} —á–∞—Ç–æ–≤.")
    await send_log(context, f"/all: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")

# -----------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------
async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return
    try:
        last_messages[update.message.chat.id] = update.message.chat.id
    except Exception:
        pass
    if not bot_active:
        return

# -----------------------
# –ó–∞–ø—É—Å–∫
# -----------------------
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("onbot", onbot))
    app.add_handler(CommandHandler("offbot", offbot))
    app.add_handler(CommandHandler("love", love_cmd))
    app.add_handler(CommandHandler("gift", gift_cmd))
    app.add_handler(CommandHandler("all", all_cmd))

    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_messages))

    print("üíò LoveBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ —Ç–≤–æ—Ä–∏—Ç—å –º–∞–≥–∏—é –ª—é–±–≤–∏!")
    app.run_polling()
