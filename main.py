#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import threading
import asyncio
import random
import time
from datetime import datetime
from http.server import BaseHTTPRequestHandler, HTTPServer
from typing import Dict, Set

from telegram import Update, ChatPermissions
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# -----------------------
# üîë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# -----------------------
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –ó–∞–¥–∞–π —Å–≤–æ—ë
OWNER_ID = int(os.environ.get("OWNER_ID", "8486672898"))
LOG_CHANNEL_ID = int(os.environ.get("LOG_CHANNEL_ID", "-1003107269526"))

bot_active = True

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤ –ø–∞–º—è—Ç–∏)
last_messages: Dict[int, int] = {}          # chat_id -> chat_id (simple set)
warnings: Dict[int, Dict[int, int]] = {}    # chat_id -> {user_id: warnings_count}
banned_users: Dict[int, Set[int]] = {}      # chat_id -> set(user_ids)
greetings: Dict[int, str] = {}              # chat_id -> greeting text
rules: Dict[int, str] = {}                  # chat_id -> rules text

# -----------------------
# ‚ù§Ô∏è –¢–µ–∫—Å—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ
# -----------------------
LOVE_PHRASES = [
    "–¢—ã –º–Ω–µ –¥–æ—Ä–æ–≥", "–Ø —Ä–∞–¥, —á—Ç–æ —Ç—ã –µ—Å—Ç—å", "–¢—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è",
    "–¢—ã –º–æ–π —á–µ–ª–æ–≤–µ–∫", "–¢—ã –¥–µ–ª–∞–µ—à—å –¥–µ–Ω—å –ª—É—á—à–µ", "–¢—ã –ø—Ä–æ—Å—Ç–æ —Å—á–∞—Å—Ç—å–µ",
    "–¢—ã –∫–∞–∫ —Å–≤–µ—Ç –≤ —Ç—É–º–∞–Ω–µ", "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å", "–¢—ã –≤–∞–∂–Ω–∞ –¥–ª—è –º–µ–Ω—è",
    "–¢—ã –º–æ–µ —á—É–¥–æ", "–¢—ã –Ω–∞–ø–æ–ª–Ω—è–µ—à—å –¥–µ–Ω—å —Ç–µ–ø–ª–æ–º", "–¢—ã –º–æ—è —Ä–∞–¥–æ—Å—Ç—å",
    "–° —Ç–æ–±–æ–π —Å–ø–æ–∫–æ–π–Ω–æ", "–¢—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞", "–¢—ã –º–æ–π —É—é—Ç", "–¢—ã –º–æ—ë –≤—Å—ë"
]

LOVE_LEVELS = [
    (0, 10, "üíî –õ—ë–¥ –º–µ–∂–¥—É —Å–µ—Ä–¥—Ü–∞–º–∏..."),
    (11, 25, "üåßÔ∏è –ï–¥–≤–∞ –∑–∞–º–µ—Ç–Ω–∞—è –∏—Å–∫—Ä–∞."),
    (26, 45, "üí´ –°–∏–º–ø–∞—Ç–∏—è —Ä–∞—Å—Ç—ë—Ç."),
    (46, 65, "üíû –ù–µ–∂–Ω–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ."),
    (66, 80, "üíñ –°–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ —É–Ω–∏—Å–æ–Ω."),
    (81, 95, "üíò –≠—Ç–æ –ø–æ—á—Ç–∏ –ª—é–±–æ–≤—å."),
    (96, 100, "üíç –°—É–¥—å–±–∞ —Å–≤—è–∑–∞–ª–∞ –≤–∞—Å –Ω–∞–≤—Å–µ–≥–¥–∞."),
]

GIFTS_ROMANTIC = [
    "üíê –ë—É–∫–µ—Ç —Å–ª–æ–≤ –∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ–∂–Ω–æ—Å—Ç–∏",
    "üç´ –®–æ–∫–æ–ª–∞–¥ –∏–∑ —á—É–≤—Å—Ç–≤–∞ —Å–∏–º–ø–∞—Ç–∏–∏",
    "üíé –û—Å–∫–æ–ª–æ–∫ –∑–≤–µ–∑–¥—ã —Å –Ω–µ–±–µ—Å",
]
GIFTS_FUNNY = [
    "üçï –û–¥–∏–Ω –∫—É—Å–æ—á–µ–∫ –ª—é–±–≤–∏ –∏ —Ç—Ä–∏ –∫—Ä–æ—à–∫–∏ –∑–∞–±–æ—Ç—ã",
    "üçü –ö–∞—Ä—Ç–æ—à–∫–∞ —Å —Å–æ—É—Å–æ–º —Å–∏–º–ø–∞—Ç–∏–∏",
    "‚òï –ß–∞—à–∫–∞ —Ç–µ–ø–ª–∞ –∏ –¥–æ–±—Ä—ã—Ö —á—É–≤—Å—Ç–≤",
]

# -----------------------
# üíã –°—Ç—Ä–∞—Å—Ç–Ω—ã–µ –ø–æ—Ü–µ–ª—É–∏ –∏ –æ–±—ä—è—Ç–∏—è (–º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫)
#    ‚Äî —É–±—Ä–∞–ª –ª—é–±—ã–µ –Ω–µ—è–≤–Ω—ã–µ NSFW, –Ω–æ –≤—Å–µ ‚Äî —è–≤–Ω—ã–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ GIF
# -----------------------
KISS_GIFS = [
    # 20+ gif —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ—Ü–µ–ª—É–µ–≤
    "https://media.giphy.com/media/l0MYC0LajbaPoEADu/giphy.gif",
    "https://media.giphy.com/media/MDJ9IbxxvDUQM/giphy.gif",
    "https://media.giphy.com/media/ZqlvCTNHpqrio/giphy.gif",
    "https://media.giphy.com/media/wnsgren9NtITS/giphy.gif",
    "https://media.giphy.com/media/12VXIxKaIEarL2/giphy.gif",
    "https://media.giphy.com/media/FqBTvSNjNzeZG/giphy.gif",
    "https://media.giphy.com/media/3oz8xAFtqoOUUrsh7W/giphy.gif",
    "https://media.giphy.com/media/3ohc1h8TbCac4z6l8Q/giphy.gif",
    "https://media.giphy.com/media/26BRuo6sLetdllPAQ/giphy.gif",
    "https://media.giphy.com/media/3o7qDEq2bMbcbPRQ2c/giphy.gif",
    "https://media.giphy.com/media/l0HlvtIPzPdt2usKs/giphy.gif",
    "https://media.giphy.com/media/xUPGcgtKxm4XlPZy7y/giphy.gif",
    "https://media.giphy.com/media/3o7aD6N0CvlV8xBkqQ/giphy.gif",
    "https://media.giphy.com/media/l41YtZOb9EUABnuqA/giphy.gif",
    "https://media.giphy.com/media/3oz8xIQDfxaB8V1bAA/giphy.gif",
    "https://media.giphy.com/media/3o7aD2saalBwwftBIY/giphy.gif",
    "https://media.giphy.com/media/l0ExncehJzexFpRHq/giphy.gif",
    "https://media.giphy.com/media/3o6Zt6ML6BklcajjsA/giphy.gif",
    "https://media.giphy.com/media/11cT0zEoXgK1bO/giphy.gif",
    "https://media.giphy.com/media/l4pTfx2qLszoacZRS/giphy.gif",
    "https://media.giphy.com/media/3o6gbbuLW76jkt8vIc/giphy.gif",
    "https://media.giphy.com/media/5GoVLqeAOo6PK/giphy.gif",
    "https://media.giphy.com/media/TdfyKrN7HGTIY/giphy.gif",
]

HUG_GIFS = [
    # 20+ gif —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—ä—è—Ç–∏–π
    "https://media.giphy.com/media/sUIZWMnfd4Mb6/giphy.gif",
    "https://media.giphy.com/media/od5H3PmEG5EVq/giphy.gif",
    "https://media.giphy.com/media/l2QDM9Jnim1YVILXa/giphy.gif",
    "https://media.giphy.com/media/143vPc6b08locw/giphy.gif",
    "https://media.giphy.com/media/3bqtLDeiDtwhq/giphy.gif",
    "https://media.giphy.com/media/XpgOZHuDfIkoM/giphy.gif",
    "https://media.giphy.com/media/3o6Zt481isNVuQI1l6/giphy.gif",
    "https://media.giphy.com/media/l0MYt5jPR6QX5pnqM/giphy.gif",
    "https://media.giphy.com/media/3oz8xAf8hGqJwzN1hG/giphy.gif",
    "https://media.giphy.com/media/xT9IgIc0lryrxvqVGM/giphy.gif",
    "https://media.giphy.com/media/3o7aD5tv1ogNBtDhDi/giphy.gif",
    "https://media.giphy.com/media/26BRuo6sLetdllPAQ/giphy.gif",
    "https://media.giphy.com/media/3o6Zt6ML6BklcajjsA/giphy.gif",
    "https://media.giphy.com/media/3o7aD6N0CvlV8xBkqQ/giphy.gif",
    "https://media.giphy.com/media/11sBLVxNs7v6w/giphy.gif",
    "https://media.giphy.com/media/3o6vXT8s7b6GZPqQsg/giphy.gif",
    "https://media.giphy.com/media/3o85xI5X4j7a4iUBsE/giphy.gif",
    "https://media.giphy.com/media/3oEduSbSGpGaRX2Vri/giphy.gif",
    "https://media.giphy.com/media/l2JJH3pQ8i3sK/giphy.gif",
    "https://media.giphy.com/media/l49JZ0kJmZSTy/giphy.gif",
]

# –°–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥–∏—Ñ–æ–≤ –ø–æ —á–∞—Ç—É
sent_kiss_gifs_per_chat: Dict[int, Set[str]] = {}
sent_hug_gifs_per_chat: Dict[int, Set[str]] = {}
last_action_per_chat: Dict[int, str] = {}  # chat_id -> "kiss" or "hug"

# -----------------------
# üåê –ú–∏–Ω–∏-–≤–µ–±—Å–µ—Ä–≤–µ—Ä (ping endpoint –¥–ª—è Render/Heroku –∏ —Ç.–¥.)
# -----------------------
def run_web():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write("LoveBot is alive üíñ".encode("utf-8"))

    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), Handler).serve_forever()

threading.Thread(target=run_web, daemon=True).start()

# -----------------------
# üìú –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------
async def send_log(context: ContextTypes.DEFAULT_TYPE, text: str):
    # –ù–µ —Å–ø–∞–º–∏–º –ª–æ–≥–æ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if "Conflict" in text:
        return
    try:
        if context and context.bot:
            await context.bot.send_message(chat_id=LOG_CHANNEL_ID, text=text)
    except Exception:
        # –ï—Å–ª–∏ –ª–æ–≥ –Ω–µ —É—Ö–æ–¥–∏—Ç ‚Äî –ø–µ—á–∞—Ç–∞–µ–º –≤ STDOUT (Render –ø–æ–∫–∞–∂–µ—Ç)
        print("LOG:", text)

# -----------------------
# üíæ –•–µ–ª–ø–µ—Ä ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ handler —Ç–æ–∂–µ)
# -----------------------
async def save_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat:
        last_messages[update.effective_chat.id] = update.effective_chat.id

# -----------------------
# ‚öôÔ∏è –í–∫–ª—é—á–µ–Ω–∏–µ / –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
# -----------------------
async def onbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    global bot_active
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞.")
        return
    bot_active = True
    await update.message.reply_text("üîî –ë–æ—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω!")
    await send_log(context, "–ë–æ—Ç –≤–∫–ª—é—á—ë–Ω.")

async def offbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    global bot_active
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞.")
        return
    bot_active = False
    await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω.")
    await send_log(context, "–ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω.")

# -----------------------
# /start
# -----------------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    if update.effective_chat and update.effective_chat.type == "private":
        await update.message.reply_text(
            "üíû –ü—Ä–∏–≤–µ—Ç! –Ø LoveBot üíñ\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/love <@username> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å üíò\n"
            "/gift <@username> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ\n"
            "/kiss <@username> ‚Äî —Å—Ç—Ä–∞—Å—Ç–Ω—ã–π –ø–æ—Ü–µ–ª—É–π/–æ–±—ä—è—Ç–∏–µ üíã\n"
            "/warn /ban /kick ‚Äî –º–æ–¥–µ—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
            "/onbot /offbot ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
            "/all <—Ç–µ–∫—Å—Ç> ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
            "/profile /id ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ\n"
        )

# -----------------------
# üíò /love ‚Äî –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
# -----------------------
async def love_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    if not bot_active or update.message is None:
        return
    args = update.message.text.split(maxsplit=1)
    initiator = update.effective_user.username or update.effective_user.first_name
    target = args[1].replace("@", "") if len(args) > 1 else initiator

    score = random.randint(0, 100)
    bar_len = 20
    filled = score * bar_len // 100
    hearts = "‚ù§Ô∏è" * (filled // 2)
    bars = hearts + "üñ§" * (bar_len - len(hearts))

    await update.message.reply_text("üíò –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª—é–±–≤–∏...")
    await asyncio.sleep(0.5)
    atmosphere = random.choice([
        "‚ú® –°—É–¥—å–±–∞ —Å–æ–µ–¥–∏–Ω—è–µ—Ç —Å–µ—Ä–¥—Ü–∞...",
        "üíû –õ—é–±–æ–≤—å –≤–∏—Ç–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ...",
        "üåπ –°–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤—Å—ë —á–∞—â–µ...",
        "üî• –ú–µ–∂–¥—É –≤–∞–º–∏ –∏—Å–∫—Ä–∞...",
    ])
    await context.bot.send_message(chat_id=update.effective_chat.id, text=atmosphere)
    await asyncio.sleep(0.7)
    result_text = f"üíû @{initiator} üíñ @{target}\nüíò –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {score}%\n[{bars}]"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=result_text)
    await asyncio.sleep(0.5)
    category = next((lbl for (lo, hi, lbl) in LOVE_LEVELS if lo <= score <= hi), "üíû –ù–µ–∂–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞")
    phrase = random.choice(LOVE_PHRASES)
    final_text = f"üíñ {category}\nüå∏ {phrase}\nüí¨ –ò—Å—Ç–∏–Ω–Ω–∞—è –ª—é–±–æ–≤—å –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥—ë—Ç –ø—É—Ç—å üí´"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=final_text)
    await send_log(context, f"/love: @{initiator} -> @{target} = {score}%")

# -----------------------
# üéÅ /gift ‚Äî –ø—Ä–æ—Å—Ç–æ–π
# -----------------------
async def gift_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    if not bot_active or update.message is None:
        return
    args = update.message.text.split(maxsplit=1)
    if len(args) < 2:
        await update.message.reply_text("üéÅ –ò—Å–ø–æ–ª—å–∑—É–π: /gift @username")
        return
    giver = update.effective_user.username or update.effective_user.first_name
    target = args[1].replace("@", "")
    gift = random.choice(GIFTS_ROMANTIC + GIFTS_FUNNY)
    await update.message.reply_text(f"üéÅ @{giver} –¥–∞—Ä–∏—Ç @{target}: {gift}")
    await send_log(context, f"/gift: @{giver} -> @{target} ({gift})")

# -----------------------
# üíã /kiss ‚Äî —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Å—Ç–Ω—ã–µ –ø–æ—Ü–µ–ª—É–∏ –∏ –æ–±—ä—è—Ç–∏—è, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤, —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ
# -----------------------
async def kiss_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    if not bot_active or update.message is None:
        return

    chat_id = update.effective_chat.id
    args = update.message.text.split(maxsplit=1)
    if len(args) < 2:
        await update.message.reply_text("üòò –ò—Å–ø–æ–ª—å–∑—É–π: /kiss @username")
        return

    sender = update.effective_user.username or update.effective_user.first_name
    target = args[1].replace("@", "")

    # –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ kiss/hug –ø–æ —á–∞—Ç—É, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–¥—Ä—è–¥ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ
    last = last_action_per_chat.get(chat_id)
    if last == "kiss":
        action = "hug"
    elif last == "hug":
        action = "kiss"
    else:
        action = random.choice(["kiss", "hug"])
    last_action_per_chat[chat_id] = action

    if action == "kiss":
        gifs = KISS_GIFS
        sent_set = sent_kiss_gifs_per_chat.setdefault(chat_id, set())
        emoji = "üíã"
        verb = "–ø–æ—Ü–µ–ª—É–π"
    else:
        gifs = HUG_GIFS
        sent_set = sent_hug_gifs_per_chat.setdefault(chat_id, set())
        emoji = "ü§ó"
        verb = "–æ–±—ä—è—Ç–∏–µ"

    # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –≥–∏—Ñ–∫—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    available = list(set(gifs) - sent_set)
    if not available:
        # –µ—Å–ª–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –≤ —á–∞—Ç–µ
        sent_set.clear()
        available = gifs.copy()
    gif = random.choice(available)
    sent_set.add(gif)

    await update.message.reply_text(f"{emoji} @{sender} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç @{target} {verb}...")
    await asyncio.sleep(0.4)
    try:
        await update.message.reply_animation(gif)
    except Exception:
        # fallback: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
        await update.message.reply_text(gif)
    await asyncio.sleep(0.4)
    phrase = random.choice([
        "üíû –ú–µ–∂–¥—É –≤–∞–º–∏ –ø—Ä–æ–±–µ–∂–∞–ª–∞ –∏—Å–∫—Ä–∞ –Ω–µ–∂–Ω–æ—Å—Ç–∏!",
        "üíñ –õ—é–±–æ–≤—å –≤–∏—Ç–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ!",
        "üå∏ –¢–µ–ø–ª–æ –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–ø–ª–µ–ª–∏—Å—å –≤–º–µ—Å—Ç–µ.",
        "üí´ –ü—É—Å—Ç—å —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –¥–ª–∏—Ç—Å—è –≤–µ—á–Ω–æ!",
        "üî• –°–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ —É–Ω–∏—Å–æ–Ω.",
    ])
    await context.bot.send_message(chat_id=chat_id, text=phrase)
    await send_log(context, f"/kiss: @{sender} -> @{target} ({verb})")

# -----------------------
# /all ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
# -----------------------
async def all_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /all")
        return
    text = update.message.text.partition(" ")[2].strip()
    if not text:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç: /all <—Ç–µ–∫—Å—Ç>")
        return
    count = 0
    for chat_id in list(last_messages.keys()):
        try:
            await context.bot.send_message(chat_id=chat_id, text=text)
            count += 1
            await asyncio.sleep(0.05)
        except Exception:
            continue
    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ~{count} —á–∞—Ç–æ–≤.")
    await send_log(context, f"/all: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {count} —á–∞—Ç–æ–≤.")

# -----------------------
# –ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ: warn, ban, unban, kick, purge
# -----------------------
async def warn_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    if not update.message.reply_to_message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å.")
        return
    chat_id = update.effective_chat.id
    actor = update.effective_user
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (–ø—Ä–æ—Å—Ç–∞—è) ‚Äî –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
    try:
        member = await context.bot.get_chat_member(chat_id, actor.id)
        if not (member.status in ("administrator", "creator") or actor.id == OWNER_ID):
            await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
            return
    except Exception:
        pass

    target = update.message.reply_to_message.from_user
    warns = warnings.setdefault(chat_id, {})
    warns[target.id] = warns.get(target.id, 0) + 1
    await update.message.reply_text(f"‚ö†Ô∏è @{target.username or target.full_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å: {warns[target.id]}")

async def ban_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    if not update.message.reply_to_message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∑–∞–±–∞–Ω–∏—Ç—å.")
        return
    chat_id = update.effective_chat.id
    actor = update.effective_user
    try:
        member = await context.bot.get_chat_member(chat_id, actor.id)
        if not (member.status in ("administrator", "creator") or actor.id == OWNER_ID):
            await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –±–∞–Ω–∏—Ç—å.")
            return
    except Exception:
        pass

    target = update.message.reply_to_message.from_user
    try:
        await context.bot.ban_chat_member(chat_id=chat_id, user_id=target.id)
        banned_users.setdefault(chat_id, set()).add(target.id)
        await update.message.reply_text(f"üî® @{target.username or target.full_name} –∑–∞–±–∞–Ω–µ–Ω.")
        await send_log(context, f"/ban: @{target.username or target.full_name} ({target.id}) –≤ {chat_id}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")

async def unban_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    if not update.message.reply_to_message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ 'unban <id>').")
        return
    chat_id = update.effective_chat.id
    actor = update.effective_user
    try:
        member = await context.bot.get_chat_member(chat_id, actor.id)
        if not (member.status in ("administrator", "creator") or actor.id == OWNER_ID):
            await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–∞–∑–±–∞–Ω–∏–≤–∞—Ç—å.")
            return
    except Exception:
        pass

    target = update.message.reply_to_message.from_user
    try:
        await context.bot.unban_chat_member(chat_id=chat_id, user_id=target.id)
        banned_users.get(chat_id, set()).discard(target.id)
        await update.message.reply_text(f"‚úÖ @{target.username or target.full_name} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        await send_log(context, f"/unban: @{target.username or target.full_name} ({target.id}) –≤ {chat_id}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {e}")

async def kick_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    if not update.message.reply_to_message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∫–∏–∫–Ω—É—Ç—å.")
        return
    chat_id = update.effective_chat.id
    actor = update.effective_user
    try:
        member = await context.bot.get_chat_member(chat_id, actor.id)
        if not (member.status in ("administrator", "creator") or actor.id == OWNER_ID):
            await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∫–∏–∫–∞—Ç—å.")
            return
    except Exception:
        pass

    target = update.message.reply_to_message.from_user
    try:
        await context.bot.ban_chat_member(chat_id=chat_id, user_id=target.id, until_date=int(time.time()) + 5)
        await context.bot.unban_chat_member(chat_id=chat_id, user_id=target.id)  # —á—Ç–æ–±—ã —ç—Ç–æ –±—ã–ª kick, –Ω–µ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç
        await update.message.reply_text(f"üë¢ @{target.username or target.full_name} –∫–∏–∫–Ω—É—Ç(–∞).")
        await send_log(context, f"/kick: @{target.username or target.full_name} ({target.id}) –≤ {chat_id}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ: {e}")

async def purge_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    # –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: —É–¥–∞–ª—è–µ—Ç N —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã—à–µ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ)
    chat_id = update.effective_chat.id
    actor = update.effective_user
    try:
        member = await context.bot.get_chat_member(chat_id, actor.id)
        if not (member.status in ("administrator", "creator") or actor.id == OWNER_ID):
            await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —á–∏—Å—Ç–∏—Ç—å —á–∞—Ç.")
            return
    except Exception:
        pass

    args = context.args
    if not args or not args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /purge <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return
    n = int(args[0])
    # –£–¥–∞–ª—è–µ–º n —Å–æ–æ–±—â–µ–Ω–∏–π —Å–≤–µ—Ä—Ö—É (–±–æ—Ç —É–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ n+1 —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—É)
        async for msg in context.bot.get_chat(chat_id).get_history(limit=n+1):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg.message_id)
            except Exception:
                pass
        await update.message.reply_text(f"üßπ –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å {n} —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º Telegram).")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

# -----------------------
# –ü—Ä–æ—Ñ–∏–ª–∏ / id / profile
# -----------------------
async def id_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    # –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏–Ω—Ñ–∞ –ø–æ —Ç–æ–º—É, –∏–Ω–∞—á–µ –ø–æ –≤—ã–∑—ã–≤–∞—é—â–µ–º—É
    target = update.message.reply_to_message.from_user if update.message.reply_to_message else update.effective_user
    uid = target.id
    name = target.full_name
    username = f"@{target.username}" if target.username else "-"
    await update.message.reply_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\nID: {uid}\n–ò–º—è: {name}\n–Æ–∑–µ—Ä–Ω–µ–π–º: {username}")

async def profile_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    # –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –º—ã –Ω–µ –∏–º–µ–µ–º –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–≥. –¥–∞—Ç–µ –∏–∑ API –±–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    target = update.message.reply_to_message.from_user if update.message.reply_to_message else update.effective_user
    uid = target.id
    name = target.full_name
    username = f"@{target.username}" if target.username else "-"
    # –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–ª–æ–∫–∞–ª—å–Ω—ã–π)
    warns = warnings.get(update.effective_chat.id, {}).get(uid, 0)
    is_banned = uid in banned_users.get(update.effective_chat.id, set())
    await update.message.reply_text(
        f"–ü—Ä–æ—Ñ–∏–ª—å {username} ({name}):\n"
        f"ID: {uid}\n"
        f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warns}\n"
        f"–í –±–∞–Ω–µ: {'–î–∞' if is_banned else '–ù–µ—Ç'}"
    )

# -----------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø—Ä–∞–≤–∏–ª (–ø—Ä–æ—Å—Ç–æ–π storage –≤ –ø–∞–º—è—Ç–∏)
# -----------------------
async def set_greeting_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    actor = update.effective_user
    try:
        member = await context.bot.get_chat_member(update.effective_chat.id, actor.id)
        if not (member.status in ("administrator", "creator") or actor.id == OWNER_ID):
            await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.")
            return
    except Exception:
        pass

    text = update.message.text.partition(" ")[2].strip()
    if not text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /setgreeting <—Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ>")
        return
    greetings[update.effective_chat.id] = text
    await update.message.reply_text("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

async def set_rules_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    actor = update.effective_user
    try:
        member = await context.bot.get_chat_member(update.effective_chat.id, actor.id)
        if not (member.status in ("administrator", "creator") or actor.id == OWNER_ID):
            await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞.")
            return
    except Exception:
        pass

    text = update.message.text.partition(" ")[2].strip()
    if not text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /setrules <—Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ>")
        return
    rules[update.effective_chat.id] = text
    await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def show_rules_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_chat(update, context)
    text = rules.get(update.effective_chat.id)
    if not text:
        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        await update.message.reply_text(f"üìú –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\n{text}")

# -----------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º Conflict –∏ –Ω–µ —à–ª—ë–º –∏—Ö –≤ –ª–æ–≥–∏
# -----------------------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    err_text = str(context.error)
    # –ù–µ —Å–ø–∞–º–∏–º –ª–æ–≥–æ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ getUpdates/webhook)
    if "Conflict" in err_text or "terminated by other getUpdates request" in err_text:
        print("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º Conflict:", err_text)
        return
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {err_text}")
    try:
        if context and context.bot:
            await context.bot.send_message(chat_id=LOG_CHANNEL_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {err_text}")
    except Exception:
        pass

# -----------------------
# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# -----------------------
def background_cleanup():
    while True:
        # –ø—Ä–æ—Å—Ç–æ–π –†–ê–ú–ï–ù–û–í–°–ö–ò–ô "–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π" —Ç–∞—Å–∫ ‚Äî —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        try:
            # Nothing heavy for now ‚Äî sleep and continue
            time.sleep(3600)
        except Exception:
            time.sleep(60)

threading.Thread(target=background_cleanup, daemon=True).start()

# -----------------------
# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -----------------------
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("onbot", onbot))
    app.add_handler(CommandHandler("offbot", offbot))

    app.add_handler(CommandHandler("love", love_cmd))
    app.add_handler(CommandHandler("gift", gift_cmd))
    app.add_handler(CommandHandler("kiss", kiss_cmd))

    app.add_handler(CommandHandler("all", all_cmd))

    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    app.add_handler(CommandHandler("warn", warn_cmd))
    app.add_handler(CommandHandler("ban", ban_cmd))
    app.add_handler(CommandHandler("unban", unban_cmd))
    app.add_handler(CommandHandler("kick", kick_cmd))
    app.add_handler(CommandHandler("purge", purge_cmd))

    # –ü—Ä–æ—Ñ–∏–ª–∏ / info
    app.add_handler(CommandHandler("id", id_cmd))
    app.add_handler(CommandHandler("profile", profile_cmd))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
    app.add_handler(CommandHandler("setgreeting", set_greeting_cmd))
    app.add_handler(CommandHandler("setrules", set_rules_cmd))
    app.add_handler(CommandHandler("rules", show_rules_cmd))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç—ã –ø—Ä–∏ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), save_chat))

    app.add_error_handler(error_handler)

    print("‚úÖ LoveBot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–æ–º–∞–Ω—Ç–∏–∫–µ üíû")
    app.run_polling()
