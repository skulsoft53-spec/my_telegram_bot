import os
import threading
import asyncio
import random
import re
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes
)

# -----------------------
# üîë  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# -----------------------
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

OWNER_ID = 8486672898          # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π id, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
LOG_CHANNEL_ID = -1003107269526
bot_active = True

# —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
last_messages = {}             # chat_id -> chat_id (–¥–ª—è /all)
saved_troll_template = None    # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è /troll
troll_stop = False

# —Ç–µ–∫—Å—Ç—ã –¥–ª—è /love –∏ /gift
LOVE_PHRASES = [
    "–¢—ã –º–Ω–µ –¥–æ—Ä–æ–≥", "–Ø —Ä–∞–¥, —á—Ç–æ —Ç—ã –µ—Å—Ç—å", "–¢—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è", "–¢—ã –º–æ–π —á–µ–ª–æ–≤–µ–∫",
    "–° —Ç–æ–±–æ–π —Å–ø–æ–∫–æ–π–Ω–æ", "–¢—ã –ø—Ä–æ—Å—Ç–æ —Å—á–∞—Å—Ç—å–µ", "–¢—ã –¥–µ–ª–∞–µ—à—å –¥–µ–Ω—å –ª—É—á—à–µ", "–¢—ã –≤–∞–∂–Ω–∞",
    "–¢—ã –º–æ–π —É—é—Ç", "–¢—ã –∫–∞–∫ —Å–≤–µ—Ç", "–¢—ã –¥–µ–ª–∞–µ—à—å –º–µ–Ω—è –ª—É—á—à–µ", "–° —Ç–æ–±–æ–π –≤—Å—ë –ø–æ-–¥—Ä—É–≥–æ–º—É",
    "–¢—ã –º–æ—è —Ä–∞–¥–æ—Å—Ç—å", "–¢—ã –º–æ—ë –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "–¢—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞", "–¢—ã –º–æ—ë –≤—Å—ë",
]
SPECIAL_PHRASES = [
    "–° —Ç–æ–±–æ–π –¥–∞–∂–µ —Ç–∏—à–∏–Ω–∞ –∑–≤—É—á–∏—Ç –∫—Ä–∞—Å–∏–≤–æ üí´",
    "–¢—ã ‚Äî –ø—Ä–∏—á–∏–Ω–∞ —á—å–µ–π-—Ç–æ —É–ª—ã–±–∫–∏ üíñ",
]
LOVE_JOKES = ["–¢—ã –∫–∞–∫ Wi-Fi ‚Äî —Ä—è–¥–æ–º, –∏ –≤—Å—ë –∏–¥–µ–∞–ª—å–Ω–æ üòÑ"]
LOVE_LEVELS = [
    (0, 10, "üíî –õ—ë–¥ –º–µ–∂–¥—É —Å–µ—Ä–¥—Ü–∞–º–∏... –Ω–æ –≤—Å—ë –µ—â—ë –µ—Å—Ç—å —à–∞–Ω—Å."),
    (11, 25, "üåßÔ∏è –ï–¥–≤–∞ –∑–∞–º–µ—Ç–Ω–∞—è –∏—Å–∫—Ä–∞."),
    (26, 45, "üí´ –°–∏–º–ø–∞—Ç–∏—è —Ä–∞—Å—Ç—ë—Ç."),
    (46, 65, "üíû –ù–µ–∂–Ω–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ."),
    (66, 80, "üíñ –°–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ —É–Ω–∏—Å–æ–Ω."),
    (81, 95, "üíò –≠—Ç–æ –ø–æ—á—Ç–∏ –ª—é–±–æ–≤—å."),
    (96, 100, "üíç –°—É–¥—å–±–∞ —Å–≤—è–∑–∞–ª–∞ –≤–∞—Å ‚Äî –ª—é–±–æ–≤—å –Ω–∞–≤—Å–µ–≥–¥–∞."),
]
GIFTS_ROMANTIC = ["üíê –ë—É–∫–µ—Ç —Å–ª–æ–≤ –∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ–∂–Ω–æ—Å—Ç–∏", "üç´ –®–æ–∫–æ–ª–∞–¥ –∏–∑ —á—É–≤—Å—Ç–≤–∞ —Å–∏–º–ø–∞—Ç–∏–∏"]
GIFTS_FUNNY = ["üçï –û–¥–∏–Ω –∫—É—Å–æ—á–µ–∫ –ª—é–±–≤–∏ –∏ —Ç—Ä–∏ –∫—Ä–æ—à–∫–∏ –∑–∞–±–æ—Ç—ã", "üçü –ö–∞—Ä—Ç–æ—à–∫–∞ —Å —Å–æ—É—Å–æ–º —Å–∏–º–ø–∞—Ç–∏–∏"]

# -----------------------
# –ú–∏–Ω–∏-–≤–µ–±—Å–µ—Ä–≤–µ—Ä (Render)
# -----------------------
def run_web():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"LoveBot is running <3")
    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), Handler).serve_forever()

threading.Thread(target=run_web, daemon=True).start()

# -----------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# -----------------------
async def send_log(context: ContextTypes.DEFAULT_TYPE, text: str):
    # –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤/–∫–∞–Ω–∞–ª–∞, –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º
    try:
        if context and context.bot:
            await context.bot.send_message(chat_id=LOG_CHANNEL_ID, text=text)
    except Exception:
        print("LOG:", text)

def split_smart_into_lines(text: str):
    """
    –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö.
    –ò–Ω–∞—á–µ –¥–µ–ª–∏–º –ø–æ 30-40 —Å–ª–æ–≤ (—Ä–∞–Ω–¥–æ–º–Ω–æ), —á—Ç–æ–±—ã —Å—Ç—Ä–æ–∫–∏ –≤—ã–≥–ª—è–¥–µ–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.
    """
    if "\n" in text:
        return [ln.strip() for ln in text.split("\n") if ln.strip()]
    words = text.split()
    lines = []
    i = 0
    # –≤—ã–±–∏—Ä–∞–µ–º —à–∞–≥ (30..40) —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
    step = random.randint(30, 40)
    while i < len(words):
        lines.append(" ".join(words[i:i+step]))
        i += step
    return lines

# -----------------------
# –ö–æ–º–∞–Ω–¥—ã: –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ
# -----------------------
async def onbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    if update.message is None or update.effective_user is None:
        return
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
        return
    bot_active = True
    await update.message.reply_text("üîî –ë–æ—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω!")
    await send_log(context, "–ë–æ—Ç –≤–∫–ª—é—á—ë–Ω.")

async def offbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    if update.message is None or update.effective_user is None:
        return
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
        return
    bot_active = False
    await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã.")
    await send_log(context, "–ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω.")

# -----------------------
# /trollsave ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω
# -----------------------
async def trollsave_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global saved_troll_template
    if update.message is None or update.effective_user is None:
        return
    if update.effective_user.id != OWNER_ID:
        return

    parts = update.message.text.split(maxsplit=1)
    if len(parts) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /trollsave <—Ç–µ–∫—Å—Ç> (–º–æ–∂–Ω–æ —Å \\n –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏).")
        return
    text = parts[1].strip()
    saved_troll_template = split_smart_into_lines(text)
    await update.message.reply_text(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {len(saved_troll_template)} —Å—Ç—Ä–æ–∫.")
    # –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    try:
        await update.message.delete()
    except Exception:
        pass
    await send_log(context, f"/trollsave: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(saved_troll_template)} —Å—Ç—Ä–æ–∫.")

# -----------------------
# /troll ‚Äî –ª–µ—Å–µ–Ω–∫–∞ (–±—ã—Å—Ç—Ä–æ, –ø–æ—Å—Ç—Ä–æ—á–Ω–æ)
# -----------------------
async def troll_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global troll_stop, saved_troll_template
    if update.message is None or update.effective_user is None:
        return
    if update.effective_user.id != OWNER_ID:
        return
    if not saved_troll_template:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /trollsave.")
        return

    troll_stop = False
    # —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–µ–Ω)
    try:
        await update.message.delete()
    except Exception:
        pass

    chat_id = update.effective_chat.id

    # –ë—ã—Å—Ç—Ä–∞—è –ª–µ—Å–µ–Ω–∫–∞: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    # –ú–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ 0.01 —Å–µ–∫ (–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ).
    # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ Telegram —Ä–µ–∂–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å, –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–∞—É–∑—É.
    for line in saved_troll_template:
        if troll_stop:
            break
        try:
            await context.bot.send_message(chat_id=chat_id, text=line)
        except Exception as e:
            # –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ –≤ /troll:", e)
            await send_log(context, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ –≤ /troll: {e}")
        # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        await asyncio.sleep(0.01)

    # –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if not troll_stop:
        try:
            await context.bot.send_message(chat_id=chat_id, text="‚úÖ –¢—Ä–æ–ª–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω! üíû")
        except Exception:
            pass
    await send_log(context, "/troll –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# -----------------------
# /trollstop
# -----------------------
async def trollstop_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global troll_stop
    if update.message is None or update.effective_user is None:
        return
    if update.effective_user.id != OWNER_ID:
        return
    troll_stop = True
    try:
        await update.message.reply_text("üõë –¢—Ä–æ–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception:
        pass
    await send_log(context, "/trollstop –≤—ã–∑–≤–∞–Ω.")

# -----------------------
# /all ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞
# -----------------------
async def all_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.effective_user is None:
        return
    if update.effective_user.id != OWNER_ID:
        return
    text = re.sub(r'^/all\s+', '', update.message.text, flags=re.I).strip()
    if not text:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç: /all <—Ç–µ–∫—Å—Ç>")
        return
    count = 0
    for chat_id in list(last_messages.keys()):
        try:
            await context.bot.send_message(chat_id=chat_id, text=text)
            count += 1
            # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∑–∞—Ç—å API
            await asyncio.sleep(0.02)
        except Exception:
            continue
    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ~{count} —á–∞—Ç–æ–≤.")
    await send_log(context, f"/all: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {count} —á–∞—Ç–æ–≤.")

# -----------------------
# /love ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
# -----------------------
async def love_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return
    # –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
    if not bot_active:
        return
    try:
        args = update.message.text.split(maxsplit=1)
        initiator = update.effective_user.username or update.effective_user.first_name
        target = args[1].replace("@", "") if len(args) > 1 else initiator
        score = random.randint(0, 100)
        # –±–∞—Ä
        bar_len = 20
        filled = score * bar_len // 100
        hearts = "‚ù§Ô∏è" * (filled // 2)  # –ø—Ä–æ—Å—Ç–æ –≤–∏–∑—É–∞–ª–∫–∞
        bars = hearts + "üñ§" * (bar_len - len(hearts))
        sent = await update.message.reply_text(f"üíû @{initiator} üíñ @{target}\n{score}% [{bars}]")
        # "–∞–Ω–∏–º–∞—Ü–∏—è"
        for _ in range(2):
            await asyncio.sleep(0.15)
            try:
                await sent.edit_text(f"üíû @{initiator} üíñ @{target}\n{score}% [{bars}]")
            except Exception:
                pass
        phrase = random.choice(SPECIAL_PHRASES if target.lower() == SIGNATURE_USER.lower() if ( 'SIGNATURE_USER' in globals() ) else False else LOVE_PHRASES + LOVE_JOKES)
        category = next((lbl for (lo, hi, lbl) in LOVE_LEVELS if lo <= score <= hi), "üíû –ù–µ–∂–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞")
        res = f"üíû @{initiator} üíñ @{target}\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}% [{bars}]\n{phrase}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
        # –ø–æ–¥–ø–∏—Å—å –¥–ª—è –æ—Å–æ–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)
        try:
            if 'SIGNATURE_TEXT' in globals() and 'SIGNATURE_USER' in globals() and target.lower() == SIGNATURE_USER.lower():
                res += f"\n\n{SIGNATURE_TEXT}"
        except Exception:
            pass
        await sent.edit_text(res)
        await send_log(context, f"/love: @{initiator} -> @{target} = {score}%")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ /love:", e)
        await send_log(context, f"–û—à–∏–±–∫–∞ /love: {e}")

# -----------------------
# /gift ‚Äî –ø–æ–¥–∞—Ä–æ–∫
# -----------------------
async def gift_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return
    if not bot_active:
        return
    args = update.message.text.split(maxsplit=1)
    if len(args) < 2:
        await update.message.reply_text("üéÅ –ò—Å–ø–æ–ª—å–∑—É–π: /gift @username")
        return
    giver = update.effective_user.username or update.effective_user.first_name
    target = args[1].replace("@", "")
    gift = random.choice(GIFTS_ROMANTIC if random.choice([True, False]) else GIFTS_FUNNY)
    msg = await update.message.reply_text(f"üéÅ @{giver} –¥–∞—Ä–∏—Ç @{target} –ø–æ–¥–∞—Ä–æ–∫:\nüéÅ ‚Ä¶")
    # –º–∏–Ω–∏-–∞–Ω–∏–º–∞—Ü–∏—è
    for _ in range(2):
        await asyncio.sleep(0.15)
        try:
            await msg.edit_text(f"üéÅ @{giver} –¥–∞—Ä–∏—Ç @{target} –ø–æ–¥–∞—Ä–æ–∫:\nüéÅ üéâ")
        except Exception:
            pass
    try:
        await msg.edit_text(f"üéÅ @{giver} –¥–∞—Ä–∏—Ç @{target} –ø–æ–¥–∞—Ä–æ–∫:\n{gift}")
    except Exception:
        pass
    await send_log(context, f"/gift: @{giver} -> @{target} ({gift})")

# -----------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤ (–¥–ª—è /all) –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
# -----------------------
async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç –ø—É—Å—Ç—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    if update.message is None:
        return
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º chat_id
    try:
        last_messages[update.message.chat.id] = update.message.chat.id
    except Exception:
        pass
    # –µ—Å–ª–∏ –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã (—Ç.–µ. –∑–¥–µ—Å—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º)
    if not bot_active:
        return

# -----------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
# -----------------------
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("onbot", onbot))
    app.add_handler(CommandHandler("offbot", offbot))
    app.add_handler(CommandHandler("trollsave", trollsave_cmd))
    app.add_handler(CommandHandler("troll", troll_cmd))
    app.add_handler(CommandHandler("trollstop", trollstop_cmd))
    app.add_handler(CommandHandler("all", all_cmd))
    app.add_handler(CommandHandler("love", love_cmd))
    app.add_handler(CommandHandler("gift", gift_cmd))

    # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_messages))

    print("‚úÖ Love+Troll Bot –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
