import os
import random
import asyncio
from http.server import BaseHTTPRequestHandler, HTTPServer
from threading import Thread
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
print("‚úÖ TELEGRAM_TOKEN –Ω–∞–π–¥–µ–Ω, –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

TARGET_USERNAMES = ["Habib471"]
SIGNATURE = "–ü–æ–ª—é–±–∏ –ê–ø–∞—á–∏, –∫–∞–∫ –æ–Ω —Ç–µ–±—è"
bot_active = True
last_messages = {}
users_sent_messages = set()

LOVE_PHRASES = [
    "–¢—ã ‚Äî –º–æ—ë –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –¥—ã—Ö–∞–Ω–∏–µ –≤–µ—Å–Ω—ã üå∏",
    "–° —Ç–æ–±–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –º–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ ‚ú®",
    "–¢—ã ‚Äî –º–æ—è –º–µ–ª–æ–¥–∏—è —Å—á–∞—Å—Ç—å—è üé∂",
    "–í —Ç–≤–æ–∏—Ö –≥–ª–∞–∑–∞—Ö –≤–∏–∂—É –Ω–µ–±–æ –∏ —Å–≤–µ—Ç üåå",
]

LOVE_JOKES = [
    "–¢—ã –∫–∞–∫ Wi-Fi ‚Äî —Ä—è–¥–æ–º, –∏ –≤—Å—ë –∏–¥–µ–∞–ª—å–Ω–æ üòÑ",
    "–¢—ã ‚Äî –±–∞—Ç–∞—Ä–µ–π–∫–∞, –±–µ–∑ —Ç–µ–±—è —Ç–µ—Ä—è—é –∑–∞—Ä—è–¥ üîã",
]

# ====== –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ======
def run_web():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"LoveBot is running <3")
    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), Handler).serve_forever()

Thread(target=run_web, daemon=True).start()

# ====== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíû –ü—Ä–∏–≤–µ—Ç! –Ø LoveBot by Apachi.\n"
        "–Ø —Ä–µ–∞–≥–∏—Ä—É—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üíå\n"
        "–ö–æ–º–∞–Ω–¥–∞ /love –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ‚ú®\n"
        "–ö–æ–º–∞–Ω–¥—ã /on –∏ /off –≤–∫–ª—é—á–∞—é—Ç –∏ –≤—ã–∫–ª—é—á–∞—é—Ç –±–æ—Ç–∞."
    )

async def bot_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    bot_active = True
    await update.message.reply_text("üîî –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!")

async def bot_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    bot_active = False
    await update.message.reply_text("üîï –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_active:
        return
    message = update.message
    if not message or not message.from_user:
        return
    username = message.from_user.username
    users_sent_messages.add(username)
    if message.chat.type in ["group", "supergroup"]:
        if username in TARGET_USERNAMES and random.random() < 0.3:
            phrase = random.choice(LOVE_PHRASES + LOVE_JOKES)
            while last_messages.get(username) == phrase:
                phrase = random.choice(LOVE_PHRASES + LOVE_JOKES)
            last_messages[username] = phrase
            await message.reply_text(f"{phrase}\n\n{SIGNATURE}", reply_to_message_id=message.message_id)

# ====== –ö–æ–º–∞–Ω–¥–∞ /love —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π ======
async def love_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_active:
        return
    message = update.message
    args = message.text.split(maxsplit=1)
    target = args[1] if len(args) > 1 else message.from_user.username
    score = random.randint(0, 100)

    bar_length = 10
    filled_length = score * bar_length // 100
    bar = "‚ñà" * filled_length + "‚ñ°" * (bar_length - filled_length)

    love_stories = [
        f"üíñ {target} –æ–¥–Ω–∞–∂–¥—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª(–∞) —Ç–µ–±—è –≤ –¥–æ–∂–¥–ª–∏–≤—ã–π –¥–µ–Ω—å, –∏ –º–∏—Ä –∑–∞–∏–≥—Ä–∞–ª —Ü–≤–µ—Ç–∞–º–∏ –Ω–∞ {score}% üåà",
        f"üíò –°—É–¥—å–±–∞ —Å–≤–µ–ª–∞ –≤–∞—Å –≤ –ø–∞—Ä–∫–µ, –∏ —Å —Ç–µ—Ö –ø–æ—Ä –≤–∞—à–µ —Å–µ—Ä–¥—Ü–µ –±—å–µ—Ç—Å—è –Ω–∞ {score}% –≤ —É–Ω–∏—Å–æ–Ω üåü",
    ]
    story = random.choice(love_stories)
    sent_message = await message.reply_text(f"üíå –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å {target}: 0%\n[{ '‚ñ°'*10 }]")

    for i in range(1, score + 1):
        filled = i * bar_length // 100
        bar = "‚ñà" * filled + "‚ñ°" * (bar_length - filled)
        await sent_message.edit_text(f"üíå –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å {target}: {i}%\n[{bar}]")
        await asyncio.sleep(0.02)

    text_to_send = ""
    emojis = ["üíñ", "‚ú®", "üåπ", "üí´", "üíì", "üå∏", "‚≠ê"]
    for char in story:
        text_to_send += char
        await sent_message.edit_text(text_to_send)
        await asyncio.sleep(0.03)
    for _ in range(15):
        text_to_send += random.choice(emojis)
        await sent_message.edit_text(text_to_send)
        await asyncio.sleep(0.1)

    await sent_message.edit_text(f"{text_to_send}\n\n{SIGNATURE}")

# ====== –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ======
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("love", love_command))
    app.add_handler(CommandHandler("on", bot_on))
    app.add_handler(CommandHandler("off", bot_off))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("üíå LoveBot –∑–∞–ø—É—â–µ–Ω!")

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
