# main.py
    # Safe Apache-style Telegram bot (aiogram v2) with numeric keyboard and template storage (SQLite).
    import logging
    import asyncio
    import aiosqlite
    import os
    from aiogram import Bot, Dispatcher, types
    from aiogram.utils import executor
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

    # Configuration via environment variables
    BOT_TOKEN = os.environ.get("7998020401:AAG3D2cB4YTdxh7i2kjFXCT85wp16UV3lNU")
    OWNER_ID = 8486672898 int(os.environ.get("OWNER_ID", "0"))
    DB_PATH = os.environ.get("DB_PATH", "data.db")

    logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s: %(message)s')
    logger = logging.getLogger(__name__)

    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not set in env. Set BOT_TOKEN before running.")
        raise SystemExit("BOT_TOKEN not set")

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(bot)

    # --- DB helpers ---
    async def init_db():
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("""CREATE TABLE IF NOT EXISTS templates (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE,
                text TEXT
            )""")
            await db.execute("""CREATE TABLE IF NOT EXISTS rate_limits (
                user_id INTEGER PRIMARY KEY,
                last_repeat_at REAL
            )""")
            await db.commit()

    async def add_template(name: str, text: str):
        try:
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute("INSERT OR REPLACE INTO templates(name,text) VALUES(?,?)", (name, text))
                await db.commit()
            return True
        except Exception:
            logger.exception("add_template")
            return False

    async def list_templates():
        out = []
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("SELECT name FROM templates ORDER BY name") as cur:
                async for row in cur:
                    out.append(row[0])
        return out

    async def get_template(name: str):
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("SELECT text FROM templates WHERE name=?", (name,)) as cur:
                row = await cur.fetchone()
                return row[0] if row else None

    # --- Keyboards ---
    def main_keyboard():
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
        kb.add("/help", "/templates")
        return kb

    def numeric_inline():
        kb = InlineKeyboardMarkup(row_width=3)
        buttons = [InlineKeyboardButton(text=str(i), callback_data=f"num:{i}") for i in range(1,10)]
        buttons.append(InlineKeyboardButton(text="0", callback_data="num:0"))
        kb.add(*buttons)
        kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="num:cancel"))
        return kb

    # --- Handlers ---
    @dp.message_handler(commands=["start"])
    async def cmd_start(message: types.Message):
        try:
            await message.answer("üëã –¢—ã –≤ –±–æ—Ç–µ –ê–ø–∞—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.", reply_markup=main_keyboard())
        except Exception:
            logger.exception("start")

    @dp.message_handler(commands=["help"])
    async def cmd_help(message: types.Message):
        txt = (
            "üìö –ö–æ–º–∞–Ω–¥—ã:
"
            "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
"
            "/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
"
            "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∫–ª–∏–∫
"
            "/templates ‚Äî —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
"
            "/addtemplate name|text ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω
"
            "/sendtemplate name ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –≤ —á–∞—Ç
"
            "/repeat template_name count speed ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–≤—Ç–æ—Ä (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω)
"
            "/num ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
"
            "/stopbot ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ (–≤–ª–∞–¥–µ–ª–µ—Ü)
"
        )
        await message.reply(txt)

    @dp.message_handler(commands=["ping"])
    async def cmd_ping(message: types.Message):
        await message.reply("–ü–æ–Ω–≥ ‚úÖ")

    @dp.message_handler(commands=["addtemplate"])
    async def cmd_addtemplate(message: types.Message):
        args = message.get_args()
        if not args or "|" not in args:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addtemplate –∏–º—è|—Ç–µ–∫—Å—Ç")
            return
        name, text = args.split("|",1)
        name = name.strip()
        text = text.strip()
        ok = await add_template(name, text)
        if ok:
            await message.reply(f"–®–∞–±–ª–æ–Ω '{name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        else:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞.")

    @dp.message_handler(commands=["templates"])
    async def cmd_templates(message: types.Message):
        templ = await list_templates()
        if not templ:
            await message.reply("–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤.")
            return
        await message.reply("\n".join(templ))

    @dp.message_handler(commands=["sendtemplate"])
    async def cmd_sendtemplate(message: types.Message):
        name = message.get_args().strip()
        if not name:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendtemplate –∏–º—è")
            return
        text = await get_template(name)
        if not text:
            await message.reply("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await message.reply(text)

    # Safe repeat: limited to 10 messages and rate-limited per user
    import time
    async def can_repeat(user_id: int, cooldown: int = 10):
        now = time.time()
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("SELECT last_repeat_at FROM rate_limits WHERE user_id=?", (user_id,)) as cur:
                row = await cur.fetchone()
            last = row[0] if row else 0
            if now - last < cooldown:
                return False, int(cooldown - (now-last))
            await db.execute("INSERT OR REPLACE INTO rate_limits(user_id,last_repeat_at) VALUES(?,?)", (user_id, now))
            await db.commit()
            return True, 0

    @dp.message_handler(commands=["repeat"])
    async def cmd_repeat(message: types.Message):
        # /repeat template_name count speed
        # speed: fast/medium/slow -> delays 0.2 / 0.7 / 1.5
        args = message.get_args().split()
        if len(args) < 3:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /repeat –∏–º—è_—à–∞–±–ª–æ–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ—Ä–æ—Å—Ç—å(fast/med/slow). –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return
        name = args[0]
        try:
            cnt = int(args[1])
        except:
            await message.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            return
        speed = args[2].lower()
        if cnt <= 0 or cnt > 10:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1..10.")
            return
        delays = {"fast":0.2, "med":0.7, "slow":1.5, "medium":0.7}
        delay = delays.get(speed, 0.7)
        ok, wait = await can_repeat(message.from_user.id, cooldown=8)
        if not ok:
            await message.reply(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {wait}s –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º.")
            return
        text = await get_template(name)
        if not text:
            await message.reply("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await message.reply(f"–ó–∞–ø—É—Å–∫–∞—é –±–µ–∑–æ–ø–∞—Å–Ω—ã–π repeat: {cnt}√ó")
        for i in range(cnt):
            try:
                await message.reply(text)
            except Exception:
                logger.exception("sending repeat")
            await asyncio.sleep(delay)
        await message.reply("–ì–æ—Ç–æ–≤–æ ‚úÖ")

    @dp.message_handler(commands=["num"])
    async def cmd_num(message: types.Message):
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É", reply_markup=numeric_inline())

    @dp.callback_query_handler(lambda c: c.data and c.data.startswith("num:"))
    async def cb_num(query: types.CallbackQuery):
        data = query.data.split(":",1)[1]
        if data == "cancel":
            await query.message.edit_text("–í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
        else:
            await query.answer(f"–ù–∞–∂–∞—Ç–∞: {data}")
            # example: append to message or store in DB if needed

    @dp.message_handler(commands=["stopbot","—Å—Ç–æ–ø–±–æ—Ç"])
    async def cmd_stop(message: types.Message):
        if OWNER_ID and message.from_user.id == OWNER_ID:
            await message.reply("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
            logger.info("Owner requested shutdown.")
            await bot.close()
            asyncio.get_event_loop().stop()
        else:
            await message.reply("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    @dp.message_handler(content_types=types.ContentType.CONTACT)
    async def contact(message: types.Message):
        c = message.contact
        await message.reply(f"–°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä: {c.phone_number}. –≠—Ç–æ—Ç –±–æ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —á—É–∂–∏–µ —Å–µ—Å—Å–∏–∏.")

    @dp.message_handler()
    async def fallback(message: types.Message):
        logger.info("Fallback from %s: %s", message.from_user.id, (message.text or "")[:200])
        await message.reply("–ù–µ –ø–æ–Ω–∏–º–∞—é. /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

    async def on_startup(_dp):
        logger.info("Starting up...")
        await init_db()

    async def on_shutdown(_dp):
        logger.info("Shutting down...")
        await bot.close()

    if __name__ == "__main__":
        executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown, skip_updates=True)