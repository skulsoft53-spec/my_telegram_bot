import os
import threading
import asyncio
import random
import re
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes
)

# -----------------------
# üîë  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# -----------------------
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

OWNER_ID = 8486672898          # <-- —Ç–≤–æ–π Telegram ID
LOG_CHANNEL_ID = -1003107269526
bot_active = True

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
last_messages = {}
saved_troll_template = None
troll_stop = False

# -----------------------
# –¢–µ–∫—Å—Ç—ã
# -----------------------
LOVE_PHRASES = [
    "–¢—ã –º–Ω–µ –¥–æ—Ä–æ–≥ üíû", "–Ø —Ä–∞–¥, —á—Ç–æ —Ç—ã –µ—Å—Ç—å üí´", "–¢—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è üíñ", "–¢—ã –º–æ–π —á–µ–ª–æ–≤–µ–∫ üíï",
    "–° —Ç–æ–±–æ–π —Å–ø–æ–∫–æ–π–Ω–æ üå∑", "–¢—ã –ø—Ä–æ—Å—Ç–æ —Å—á–∞—Å—Ç—å–µ üåô", "–¢—ã –¥–µ–ª–∞–µ—à—å –¥–µ–Ω—å –ª—É—á—à–µ ‚òÄÔ∏è", "–¢—ã –≤–∞–∂–Ω–∞ üíù",
    "–¢—ã –º–æ–π —É—é—Ç üíó", "–¢—ã –∫–∞–∫ —Å–≤–µ—Ç ‚ú®", "–¢—ã –¥–µ–ª–∞–µ—à—å –º–µ–Ω—è –ª—É—á—à–µ üíê", "–¢—ã –º–æ—è —Ä–∞–¥–æ—Å—Ç—å üå∏",
    "–¢—ã –º–æ—ë –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ üíì", "–¢—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ üíû", "–¢—ã –º–æ—ë –≤—Å—ë üíò"
]
LOVE_JOKES = ["–¢—ã –∫–∞–∫ Wi-Fi ‚Äî —Ä—è–¥–æ–º, –∏ –≤—Å—ë –∏–¥–µ–∞–ª—å–Ω–æ üòÑ"]
LOVE_LEVELS = [
    (0, 10, "üíî –õ—ë–¥ –º–µ–∂–¥—É —Å–µ—Ä–¥—Ü–∞–º–∏... –Ω–æ —à–∞–Ω—Å –µ—Å—Ç—å."),
    (11, 25, "üåßÔ∏è –ï–¥–≤–∞ –∑–∞–º–µ—Ç–Ω–∞—è –∏—Å–∫—Ä–∞."),
    (26, 45, "üí´ –°–∏–º–ø–∞—Ç–∏—è —Ä–∞—Å—Ç—ë—Ç."),
    (46, 65, "üíû –ù–µ–∂–Ω–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ."),
    (66, 80, "üíñ –°–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ —É–Ω–∏—Å–æ–Ω."),
    (81, 95, "üíò –≠—Ç–æ –ø–æ—á—Ç–∏ –ª—é–±–æ–≤—å."),
    (96, 100, "üíç –õ—é–±–æ–≤—å –Ω–∞–≤—Å–µ–≥–¥–∞."),
]
GIFTS_ROMANTIC = ["üíê –ë—É–∫–µ—Ç —Å–ª–æ–≤ –∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ–∂–Ω–æ—Å—Ç–∏", "üç´ –®–æ–∫–æ–ª–∞–¥ –∏–∑ —á—É–≤—Å—Ç–≤–∞ —Å–∏–º–ø–∞—Ç–∏–∏"]
GIFTS_FUNNY = ["üçï –û–¥–∏–Ω –∫—É—Å–æ—á–µ–∫ –ª—é–±–≤–∏ –∏ —Ç—Ä–∏ –∫—Ä–æ—à–∫–∏ –∑–∞–±–æ—Ç—ã", "üçü –ö–∞—Ä—Ç–æ—à–∫–∞ —Å —Å–æ—É—Å–æ–º —Å–∏–º–ø–∞—Ç–∏–∏"]

# -----------------------
# –ú–∏–Ω–∏-–≤–µ–±—Å–µ—Ä–≤–µ—Ä (–¥–ª—è Render)
# -----------------------
def run_web():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"LoveBot is running <3")
    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), Handler).serve_forever()

threading.Thread(target=run_web, daemon=True).start()

# -----------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------
async def send_log(context: ContextTypes.DEFAULT_TYPE, text: str):
    try:
        if context and context.bot:
            await context.bot.send_message(chat_id=LOG_CHANNEL_ID, text=text)
    except Exception:
        print("LOG:", text)

def split_smart_into_lines(text: str):
    """–†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ ‚Äî –∫–∞–∂–¥—ã–µ 30-40 —Å–ª–æ–≤)."""
    if "\n" in text:
        return [ln.strip() for ln in text.split("\n") if ln.strip()]
    words = text.split()
    lines, i = [], 0
    step = random.randint(30, 40)
    while i < len(words):
        lines.append(" ".join(words[i:i+step]))
        i += step
    return lines

# -----------------------
# –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
# -----------------------
async def onbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    if update.effective_user.id != OWNER_ID:
        return await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
    bot_active = True
    await update.message.reply_text("üîî –ë–æ—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω!")

async def offbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    if update.effective_user.id != OWNER_ID:
        return await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
    bot_active = False
    await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã.")

# -----------------------
# /trollsave ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω
# -----------------------
async def trollsave_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global saved_troll_template
    if update.effective_user.id != OWNER_ID:
        return
    parts = update.message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /trollsave <—Ç–µ–∫—Å—Ç>")
    text = parts[1].strip()
    saved_troll_template = split_smart_into_lines(text)
    await update.message.reply_text(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {len(saved_troll_template)} —Å—Ç—Ä–æ–∫.")
    try:
        await update.message.delete()
    except:
        pass

# -----------------------
# /troll ‚Äî –±—ã—Å—Ç—Ä–∞—è ‚Äú–ª–µ—Å–µ–Ω–∫–∞‚Äù
# -----------------------
async def troll_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global troll_stop, saved_troll_template
    if update.effective_user.id != OWNER_ID:
        return
    if not saved_troll_template:
        return await update.message.reply_text("‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /trollsave.")
    troll_stop = False
    try:
        await update.message.delete()
    except:
        pass
    chat_id = update.effective_chat.id
    for line in saved_troll_template:
        if troll_stop:
            break
        try:
            await context.bot.send_message(chat_id=chat_id, text=line)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ /troll:", e)
        await asyncio.sleep(0.02)
    if not troll_stop:
        await context.bot.send_message(chat_id=chat_id, text="‚úÖ –¢—Ä–æ–ª–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω üíû")

# -----------------------
# /trollstop
# -----------------------
async def trollstop_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global troll_stop
    if update.effective_user.id != OWNER_ID:
        return
    troll_stop = True
    await update.message.reply_text("üõë –¢—Ä–æ–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# -----------------------
# /all ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞
# -----------------------
async def all_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return
    text = re.sub(r'^/all\s+', '', update.message.text).strip()
    if not text:
        return await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç: /all <—Ç–µ–∫—Å—Ç>")
    count = 0
    for chat_id in list(last_messages.keys()):
        try:
            await context.bot.send_message(chat_id=chat_id, text=text)
            count += 1
            await asyncio.sleep(0.05)
        except:
            continue
    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({count} —á–∞—Ç–æ–≤).")

# -----------------------
# /love ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
# -----------------------
async def love_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_active:
        return
    args = update.message.text.split(maxsplit=1)
    initiator = update.effective_user.username or update.effective_user.first_name
    target = args[1].replace("@", "") if len(args) > 1 else initiator
    score = random.randint(0, 100)
    bars = "‚ù§Ô∏è" * (score // 10) + "üñ§" * (10 - score // 10)
    phrase = random.choice(LOVE_PHRASES + LOVE_JOKES)
    level = next((lbl for lo, hi, lbl in LOVE_LEVELS if lo <= score <= hi), "")
    await update.message.reply_text(
        f"üíû @{initiator} üíñ @{target}\n"
        f"–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {score}% [{bars}]\n"
        f"{phrase}\n{level}"
    )

# -----------------------
# /gift ‚Äî –ø–æ–¥–∞—Ä–æ–∫
# -----------------------
async def gift_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_active:
        return
    args = update.message.text.split(maxsplit=1)
    if len(args) < 2:
        return await update.message.reply_text("üéÅ –ò—Å–ø–æ–ª—å–∑—É–π: /gift @username")
    giver = update.effective_user.username or update.effective_user.first_name
    target = args[1].replace("@", "")
    gift = random.choice(GIFTS_ROMANTIC + GIFTS_FUNNY)
    await update.message.reply_text(f"üéÅ @{giver} –¥–∞—Ä–∏—Ç @{target} –ø–æ–¥–∞—Ä–æ–∫:\n{gift}")

# -----------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------
async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        last_messages[update.message.chat.id] = update.message.chat.id
    if not bot_active:
        return  # –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω

# -----------------------
# –ó–∞–ø—É—Å–∫
# -----------------------
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("onbot", onbot))
    app.add_handler(CommandHandler("offbot", offbot))
    app.add_handler(CommandHandler("trollsave", trollsave_cmd))
    app.add_handler(CommandHandler("troll", troll_cmd))
    app.add_handler(CommandHandler("trollstop", trollstop_cmd))
    app.add_handler(CommandHandler("all", all_cmd))
    app.add_handler(CommandHandler("love", love_cmd))
    app.add_handler(CommandHandler("gift", gift_cmd))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_messages))

    print("‚úÖ Love+Troll Bot –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
