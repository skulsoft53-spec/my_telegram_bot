import os
import threading
import asyncio
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes
import random
import traceback
import re

# üîë –¢–æ–∫–µ–Ω
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
print("‚úÖ TELEGRAM_TOKEN –Ω–∞–π–¥–µ–Ω, –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TARGET_USERNAMES = ["Habib471"]
SIGNATURE_USER = "Habib471"
SIGNATURE_TEXT = "–ü–æ–ª—é–±–∏ –ê–ø–∞—á–∏, –∫–∞–∫ –æ–Ω —Ç–µ–±—è üíû"
OWNER_USERNAME = "bxuwy"
LOG_CHANNEL_ID = -1003107269526  # –ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
bot_active = True
updating = False
last_messages = {}
MAX_CONCURRENT_TASKS = 10
task_semaphore = asyncio.Semaphore(MAX_CONCURRENT_TASKS)

# üìå –¢—Ä–æ–ª–ª–∏–Ω–≥
saved_troll_template = None
troll_stop = False

# üíñ –§—Ä–∞–∑—ã /love
LOVE_PHRASES = [
    "–¢—ã –º–Ω–µ –¥–æ—Ä–æ–≥", "–Ø —Ä–∞–¥, —á—Ç–æ —Ç—ã –µ—Å—Ç—å", "–¢—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è", "–¢—ã –º–æ–π —á–µ–ª–æ–≤–µ–∫",
    "–° —Ç–æ–±–æ–π —Å–ø–æ–∫–æ–π–Ω–æ", "–¢—ã –ø—Ä–æ—Å—Ç–æ —Å—á–∞—Å—Ç—å–µ", "–¢—ã –¥–µ–ª–∞–µ—à—å –¥–µ–Ω—å –ª—É—á—à–µ", "–¢—ã –≤–∞–∂–Ω–∞",
    "–¢—ã –º–æ–π —É—é—Ç", "–¢—ã –∫–∞–∫ —Å–≤–µ—Ç", "–¢—ã –¥–µ–ª–∞–µ—à—å –º–µ–Ω—è –ª—É—á—à–µ", "–° —Ç–æ–±–æ–π –≤—Å—ë –ø–æ-–¥—Ä—É–≥–æ–º—É",
    "–¢—ã –º–æ—è —Ä–∞–¥–æ—Å—Ç—å", "–¢—ã –º–æ–π —Å–≤–µ—Ç–ª—ã–π —á–µ–ª–æ–≤–µ–∫", "–¢—ã –º–æ—ë –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "–¢—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞",
    "–¢—ã –º–æ–π —Å–≤–µ—Ç –≤ –ª—é–±–æ–π –¥–µ–Ω—å", "–¢—ã —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å", "–¢—ã –º–æ—ë –≤—Å—ë",
]
SPECIAL_PHRASES = [
    "–° —Ç–æ–±–æ–π –¥–∞–∂–µ —Ç–∏—à–∏–Ω–∞ –∑–≤—É—á–∏—Ç –∫—Ä–∞—Å–∏–≤–æ üí´",
    "–¢—ã ‚Äî –ø—Ä–∏—á–∏–Ω–∞ —É–ª—ã–±–∫–∏ –ê–ø–∞—á–∏ üíñ",
]
LOVE_JOKES = ["–¢—ã –∫–∞–∫ Wi-Fi ‚Äî —Ä—è–¥–æ–º, –∏ –≤—Å—ë –∏–¥–µ–∞–ª—å–Ω–æ üòÑ"]
LOVE_LEVELS = [
    (0, 10, "üíî –õ—ë–¥ –º–µ–∂–¥—É —Å–µ—Ä–¥—Ü–∞–º–∏... –Ω–æ –≤—Å—ë –µ—â—ë –µ—Å—Ç—å —à–∞–Ω—Å."),
    (11, 25, "üåßÔ∏è –ï–¥–≤–∞ –∑–∞–º–µ—Ç–Ω–∞—è –∏—Å–∫—Ä–∞, –Ω–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –≤—Å–ø—ã—Ö–Ω—É—Ç—å."),
    (26, 45, "üí´ –°–∏–º–ø–∞—Ç–∏—è —Ä–∞—Å—Ç—ë—Ç, –ø—É—Å—Ç—å –≤—Ä–µ–º—è –ø–æ–∫–∞–∂–µ—Ç."),
    (46, 65, "üíû –ù–µ–∂–Ω–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∞–º–∏."),
    (66, 80, "üíñ –°–µ—Ä–¥—Ü–∞ –Ω–∞—á–∏–Ω–∞—é—Ç –±–∏—Ç—å—Å—è –≤ —É–Ω–∏—Å–æ–Ω."),
    (81, 95, "üíò –≠—Ç–æ –ø–æ—á—Ç–∏ –ª—é–±–æ–≤—å ‚Äî –∏—Å–∫—Ä–µ–Ω–Ω—è—è –∏ —Å–∏–ª—å–Ω–∞—è."),
    (96, 100, "üíç –°—É–¥—å–±–∞ —Å–≤—è–∑–∞–ª–∞ –≤–∞—Å ‚Äî –ª—é–±–æ–≤—å –Ω–∞–≤—Å–µ–≥–¥–∞."),
]
GIFTS_ROMANTIC = ["üíê –ë—É–∫–µ—Ç —Å–ª–æ–≤ –∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ–∂–Ω–æ—Å—Ç–∏", "üç´ –®–æ–∫–æ–ª–∞–¥ –∏–∑ —á—É–≤—Å—Ç–≤–∞ —Å–∏–º–ø–∞—Ç–∏–∏"]
GIFTS_FUNNY = ["üçï –û–¥–∏–Ω –∫—É—Å–æ—á–µ–∫ –ª—é–±–≤–∏ –∏ —Ç—Ä–∏ –∫—Ä–æ—à–∫–∏ –∑–∞–±–æ—Ç—ã", "üçü –ö–∞—Ä—Ç–æ—à–∫—É —Å —Å–æ—É—Å–æ–º —Å–∏–º–ø–∞—Ç–∏–∏"]

# üåê –ú–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä
def run_web():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"LoveBot is running <3")
    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), Handler).serve_forever()
threading.Thread(target=run_web, daemon=True).start()

# üì§ –õ–æ–≥–∏
async def send_log(context: ContextTypes.DEFAULT_TYPE, text: str):
    try:
        await context.bot.send_message(chat_id=LOG_CHANNEL_ID, text=text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")

# üí¨ –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíû –ü—Ä–∏–≤–µ—Ç! –Ø LoveBot by Apachi.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/love ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å üíò\n"
        "/gift ‚Äî –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ\n"
        "/trollsave ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω üìù\n"
        "/troll ‚Äî –ø–µ—á–∞—Ç—å —à–∞–±–ª–æ–Ω–∞ –ª–µ—Å–µ–Ω–∫–æ–π ü™ú (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/trollstop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞ üõë\n"
        "/onbot –∏ /offbot ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å).\n"
        ".all <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"
    )

async def bot_off_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active, updating
    if update.message.from_user.username != OWNER_USERNAME:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    bot_active = False
    updating = True
    await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
    await send_log(context, "–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")

async def bot_on_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active, updating
    if update.message.from_user.username != OWNER_USERNAME:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    bot_active = True
    updating = False
    await update.message.reply_text("üîî –ë–æ—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω!")
    await send_log(context, "–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω.")

# üíò /love ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞
async def love_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not bot_active:
            return
        async with task_semaphore:
            message = update.message
            args = message.text.split(maxsplit=1)
            target = args[1].replace("@", "") if len(args) > 1 else message.from_user.username
            final_score = random.randint(0, 100)
            hearts = ["‚ù§Ô∏è", "üíñ", "üíò", "üíû"]
            sparkles = ["‚ú®", "üí´", "üå∏", "‚≠ê"]
            bar_length = 20
            filled_length = final_score * bar_length // 100
            bar = "".join(random.choices(hearts + sparkles, k=filled_length)) + "üñ§" * (bar_length - filled_length)
            sent_msg = await message.reply_text(f"üíû @{message.from_user.username} üíñ @{target}\n{final_score}% [{bar}]")
            for _ in range(3):
                anim_bar = "".join(random.choices(hearts + sparkles, k=filled_length)) + "üñ§" * (bar_length - filled_length)
                await sent_msg.edit_text(f"üíû @{message.from_user.username} üíñ @{target}\n{final_score}% [{anim_bar}]")
                await asyncio.sleep(0.2)
            phrase = random.choice(SPECIAL_PHRASES if target.lower() == SIGNATURE_USER.lower() else LOVE_PHRASES + LOVE_JOKES)
            category = next((label for (low, high, label) in LOVE_LEVELS if low <= final_score <= high), "üíû –ù–µ–∂–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞")
            result_text = f"üíû @{message.from_user.username} üíñ @{target}\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {final_score}% [{bar}]\n{phrase}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
            if target.lower() == SIGNATURE_USER.lower():
                result_text += f"\n\n{SIGNATURE_TEXT}"
            await sent_msg.edit_text(result_text)
            await send_log(context, f"/love: @{message.from_user.username} üíñ @{target} = {final_score}%")
    except Exception:
        await send_log(context, f"–û—à–∏–±–∫–∞ –≤ /love: {traceback.format_exc()}")

# üéÅ /gift
async def gift_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not bot_active:
            return
        async with task_semaphore:
            message = update.message
            args = message.text.split(maxsplit=1)
            if len(args) < 2:
                await message.reply_text("üéÅ –ò—Å–ø–æ–ª—å–∑—É–π: /gift @username")
                return
            target = args[1].replace("@", "")
            gift_list = GIFTS_ROMANTIC if random.choice([True, False]) else GIFTS_FUNNY
            gift = random.choice(gift_list)
            sent_msg = await message.reply_text(f"üéÅ @{message.from_user.username} –¥–∞—Ä–∏—Ç @{target} –ø–æ–¥–∞—Ä–æ–∫:\nüéÅ ‚Ä¶")
            for _ in range(3):
                await asyncio.sleep(0.2)
                await sent_msg.edit_text(f"üéÅ @{message.from_user.username} –¥–∞—Ä–∏—Ç @{target} –ø–æ–¥–∞—Ä–æ–∫:\nüéÅ üéâ")
            await sent_msg.edit_text(f"üéÅ @{message.from_user.username} –¥–∞—Ä–∏—Ç @{target} –ø–æ–¥–∞—Ä–æ–∫:\n{gift}")
            await send_log(context, f"/gift: @{message.from_user.username} ‚Üí @{target} ({gift})")
    except Exception:
        await send_log(context, f"–û—à–∏–±–∫–∞ –≤ /gift: {traceback.format_exc()}")

# üíæ /trollsave ‚Äî —É–º–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
async def trollsave_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global saved_troll_template
    if update.message.from_user.username != OWNER_USERNAME:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
        return
    
    args = update.message.text.split(maxsplit=1)
    if len(args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /trollsave <—Ç–µ–∫—Å—Ç>")
        return
    
    text = args[1].strip()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
    sentences = re.split(r'(?<=[.!?])\s+', text)
    
    # –î–µ–ª–∏–º –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    max_len = 40
    lines = []
    for sentence in sentences:
        while len(sentence) > max_len:
            split_pos = sentence.rfind(' ', 0, max_len)
            if split_pos == -1:
                split_pos = max_len
            lines.append(sentence[:split_pos].strip())
            sentence = sentence[split_pos:].strip()
        if sentence:
            lines.append(sentence)
    
    saved_troll_template = lines
    await update.message.reply_text(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å {len(saved_troll_template)} —Å—Ç—Ä–æ–∫–∞–º–∏.")

# ü™ú /troll ‚Äî –±—ã—Å—Ç—Ä—ã–π —Ç—Ä–æ–ª–ª–∏–Ω–≥
async def troll_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global troll_stop
    if update.message.from_user.username != OWNER_USERNAME:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
        return
    if not saved_troll_template:
        await update.message.reply_text("‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–∞.")
        return

    async def send_ladder():
        global troll_stop
        async with task_semaphore:
            troll_stop = False
            for line in saved_troll_template:
                if troll_stop:
                    break
                await update.message.reply_text(line)
                await asyncio.sleep(0.1)  # —Å–∫–æ—Ä–æ—Å—Ç—å "–ª–µ—Å–µ–Ω–∫–∏"

    asyncio.create_task(send_ladder())

# üõë /trollstop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞
async def trollstop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global troll_stop
    if update.message.from_user.username != OWNER_USERNAME:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
        return
    troll_stop = True
    await update.message.reply_text("üõë –¢—Ä–æ–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# .all ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
async def all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.username != OWNER_USERNAME:
        return
    text = update.message.text[5:]  # –ø–æ—Å–ª–µ ".all "
    async with task_semaphore:
        for chat_id in last_messages:
            try:
                await context.bot.send_message(chat_id=chat_id, text=text)
            except Exception:
                continue

# üí¨ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.message.chat.id
        last_messages[chat_id] = update.message.from_user.username
        if not bot_active:
            await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.")
    except Exception:
        await send_log(context, f"–û—à–∏–±–∫–∞ handle_message: {traceback.format_exc()}")

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("onbot", bot_on_command))
    app.add_handler(CommandHandler("offbot", bot_off_command))
    app.add_handler(CommandHandler("love", love_command))
    app.add_handler(CommandHandler("gift", gift_command))
    app.add_handler(CommandHandler("trollsave", trollsave_command))
    app.add_handler(CommandHandler("troll", troll_command))
    app.add_handler(CommandHandler("trollstop", trollstop_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_handler(MessageHandler(filters.Regex(r"^\.all "), all_command))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
