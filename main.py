import os
import threading
import asyncio
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import random

# üîë –¢–æ–∫–µ–Ω
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
print("‚úÖ TELEGRAM_TOKEN –Ω–∞–π–¥–µ–Ω, –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SIGNATURE_USER = "Habib471"
SIGNATURE_TEXT = "–ü–æ–ª—é–±–∏ –ê–ø–∞—á–∏, –∫–∞–∫ –æ–Ω —Ç–µ–±—è üíû"
OWNER_USERNAME = "bxuwy"
bot_active = True

# üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
MAX_CONCURRENT_TASKS = 10
task_semaphore = asyncio.Semaphore(MAX_CONCURRENT_TASKS)

# üíñ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã (–¥–ª—è /love)
LOVE_PHRASES = [
    "–¢—ã –º–Ω–µ –¥–æ—Ä–æ–≥",
    "–Ø —Ä–∞–¥, —á—Ç–æ —Ç—ã –µ—Å—Ç—å",
    "–¢—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è",
    "–¢—ã –º–æ–π —á–µ–ª–æ–≤–µ–∫",
    "–° —Ç–æ–±–æ–π —Å–ø–æ–∫–æ–π–Ω–æ",
    "–¢—ã –ø—Ä–æ—Å—Ç–æ —Å—á–∞—Å—Ç—å–µ",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –¥–µ–Ω—å –ª—É—á—à–µ",
    "–ö–∞–∂–¥—ã–π –º–∏–≥ —Å —Ç–æ–±–æ–π –±–µ—Å—Ü–µ–Ω–µ–Ω",
    "–¢—ã –º–æ—è —Ä–∞–¥–æ—Å—Ç—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
    "–° —Ç–æ–±–æ–π —Ö–æ—á–µ—Ç—Å—è –º–µ—á—Ç–∞—Ç—å –∏ –∂–∏—Ç—å",
    "–¢—ã ‚Äî —Å–≤–µ—Ç –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏",
    "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º—ã—Å–ª–∏ –æ —Ç–µ–±–µ",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –≤—Å—ë –≤–æ–∫—Ä—É–≥ —è—Ä—á–µ",
    "–° —Ç–æ–±–æ–π –ª—é–±–æ–µ –º–µ—Å—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ–º–æ–º",
    "–¢—ã ‚Äî –º–æ—è –º–∞–ª–µ–Ω—å–∫–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è",
]

SPECIAL_PHRASES = [
    "–° —Ç–æ–±–æ–π –¥–∞–∂–µ —Ç–∏—à–∏–Ω–∞ –∑–≤—É—á–∏—Ç –∫—Ä–∞—Å–∏–≤–æ üí´",
    "–¢—ã ‚Äî –ø—Ä–∏—á–∏–Ω–∞ —É–ª—ã–±–∫–∏ –ê–ø–∞—á–∏ üíñ",
    "–¢—ã ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –ê–ø–∞—á–∏ üíû",
    "–¢–≤–æ–∏ –≥–ª–∞–∑–∞ ‚Äî –∫–∞–∫ –æ–∫–µ–∞–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—Ç—Å—è —Ç–æ–Ω—É—Ç—å",
    "–° —Ç–æ–±–æ–π –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–∞–≥–∏–µ–π",
    "–¢—ã ‚Äî –º—É–∑—ã–∫–∞ –º–æ–µ–≥–æ —Å–µ—Ä–¥—Ü–∞",
    "–¢–≤–æ–∏ —Å–ª–æ–≤–∞ ‚Äî –∫–∞–∫ –ª–∞—Å–∫–æ–≤—ã–π –≤–µ—Ç–µ—Ä –≤ –¥—É—à–µ",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ —Å–ø–æ—Å–æ–±–Ω–∞ —Ä–∞—Å—Ç–æ–ø–∏—Ç—å –ª—ë–¥ –≤ —Å–µ—Ä–¥—Ü–µ",
    "–¢—ã ‚Äî —Å–∞–º–∞—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –º–µ–ª–æ–¥–∏—è –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏",
    "–° —Ç–æ–±–æ–π –¥–∞–∂–µ –¥–æ–∂–¥—å –∫–∞–∂–µ—Ç—Å—è –≤–æ–ª—à–µ–±–Ω—ã–º",
]

LOVE_LEVELS = [
    (0, 10, "üíî –õ—ë–¥ –º–µ–∂–¥—É —Å–µ—Ä–¥—Ü–∞–º–∏... –Ω–æ –≤—Å—ë –µ—â—ë –µ—Å—Ç—å —à–∞–Ω—Å."),
    (11, 25, "üåßÔ∏è –ï–¥–≤–∞ –∑–∞–º–µ—Ç–Ω–∞—è –∏—Å–∫—Ä–∞, –Ω–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –≤—Å–ø—ã—Ö–Ω—É—Ç—å."),
    (26, 45, "üí´ –°–∏–º–ø–∞—Ç–∏—è —Ä–∞—Å—Ç—ë—Ç, –ø—É—Å—Ç—å –≤—Ä–µ–º—è –ø–æ–∫–∞–∂–µ—Ç."),
    (46, 65, "üíû –ù–µ–∂–Ω–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∞–º–∏."),
    (66, 80, "üíñ –°–µ—Ä–¥—Ü–∞ –Ω–∞—á–∏–Ω–∞—é—Ç –±–∏—Ç—å—Å—è –≤ —É–Ω–∏—Å–æ–Ω."),
    (81, 95, "üíò –≠—Ç–æ –ø–æ—á—Ç–∏ –ª—é–±–æ–≤—å ‚Äî –∏—Å–∫—Ä–µ–Ω–Ω—è—è –∏ —Å–∏–ª—å–Ω–∞—è."),
    (96, 100, "üíç –°—É–¥—å–±–∞ —Å–≤—è–∑–∞–ª–∞ –≤–∞—Å ‚Äî –ª—é–±–æ–≤—å –Ω–∞–≤—Å–µ–≥–¥–∞."),
]

GIFTS_ROMANTIC = [
    "üíê –ë—É–∫–µ—Ç —Å–ª–æ–≤ –∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ–∂–Ω–æ—Å—Ç–∏",
    "üç´ –®–æ–∫–æ–ª–∞–¥ –∏–∑ —á—É–≤—Å—Ç–≤–∞ —Å–∏–º–ø–∞—Ç–∏–∏",
    "üåπ –†–æ–∑–∞ —Å –∞—Ä–æ–º–∞—Ç–æ–º —Ç–∏—à–∏–Ω—ã",
    "üíå –°–µ—Ä–¥—Ü–µ, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –æ—Ç —Ä—É–∫–∏",
    "‚òï –ö–æ—Ñ–µ —Å –ø—Ä–∏–≤–∫—É—Å–æ–º –∑–∞–±–æ—Ç—ã",
    "üåô –ù–æ—á—å –ø–æ–¥ –∑–≤—ë–∑–¥–∞–º–∏ –¥–ª—è –¥–≤–æ–∏—Ö",
    "üíñ –£–ª—ã–±–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª–µ—á–∏—Ç –¥—É—à—É",
    "üé∂ –ú–µ–ª–æ–¥–∏—è –∏–∑ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π",
]

GIFTS_FUNNY = [
    "üçï –û–¥–∏–Ω –∫—É—Å–æ—á–µ–∫ –ª—é–±–≤–∏ –∏ —Ç—Ä–∏ –∫—Ä–æ—à–∫–∏ –∑–∞–±–æ—Ç—ã",
    "üçü –ö–∞—Ä—Ç–æ—à–∫—É —Å —Å–æ—É—Å–æ–º —Å–∏–º–ø–∞—Ç–∏–∏",
    "üß∏ –ò–≥—Ä—É—à–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å–∫—É—á–∞—Ç—å",
    "ü™Ñ –í–æ–ª—à–µ–±–Ω—É—é –ø–∞–ª–æ—á–∫—É, —á—Ç–æ–±—ã –¥–µ–Ω—å –±—ã–ª –¥–æ–±—Ä–µ–µ",
    "üéà –í–æ–∑–¥—É—à–Ω—ã–π —à–∞—Ä–∏–∫ —Å —Ç–µ–ø–ª–æ–º",
    "üï∂Ô∏è –ö–∞–ø–ª—é —Å—Ç–∏–ª—è –∏ –≥–æ—Ä—Å—Ç—å –æ–±–∞—è–Ω–∏—è",
    "üç∞ –ö—É—Å–æ—á–µ–∫ —Å—á–∞—Å—Ç—å—è, —Å–≤–µ–∂–µ–∏—Å–ø–µ—á—ë–Ω–Ω—ã–π!",
    "üê∏ –õ—è–≥—É—à–∫—É —É–¥–∞—á–∏ (–≤–¥—Ä—É–≥ –ø—Ä–∏–Ω—Ü?)",
]

# üåê –ú–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä
def run_web():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"LoveBot is running <3")
    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), Handler).serve_forever()

threading.Thread(target=run_web, daemon=True).start()

# üí¨ –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíû –ü—Ä–∏–≤–µ—Ç! –Ø LoveBot by Apachi.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/love ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å üíò\n"
        "/gift ‚Äî –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ\n"
        "/onbot ‚Äî –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ üîî (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/offbot ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ üîï (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"
    )

async def bot_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    if update.message.from_user.username != OWNER_USERNAME:
        await update.message.reply_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    bot_active = True
    await update.message.reply_text("üîî –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!")

async def bot_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    if update.message.from_user.username != OWNER_USERNAME:
        await update.message.reply_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    bot_active = False
    await update.message.reply_text("üîï –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!")

# üíò /love
async def love_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    if not bot_active:
        await update.message.reply_text("‚è≥ –ë–æ—Ç —Å–µ–π—á–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    async def process_love():
        async with task_semaphore:
            message = update.message
            target = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else message.from_user.username
            final_score = random.randint(0, 100)
            phrase = random.choice(SPECIAL_PHRASES if target.lower() == SIGNATURE_USER.lower() else LOVE_PHRASES)
            category = next((label for (low, high, label) in LOVE_LEVELS if low <= final_score <= high), "üíû –ù–µ–∂–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞")
            bar_length = 10
            filled_length = final_score * bar_length // 100
            bar = "‚ù§Ô∏è" * filled_length + "üñ§" * (bar_length - filled_length)
            result_text = f"üíû @{message.from_user.username} üíñ @{target}\n{final_score}% [{bar}]\n{phrase}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
            if target.lower() == SIGNATURE_USER.lower():
                result_text += f"\n\n{SIGNATURE_TEXT}"
            await message.reply_text(result_text)
    asyncio.create_task(process_love())

# üéÅ /gift
async def gift_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    if not bot_active:
        await update.message.reply_text("‚è≥ –ë–æ—Ç —Å–µ–π—á–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    async def process_gift():
        async with task_semaphore:
            message = update.message
            args = message.text.split(maxsplit=1)
            if len(args) < 2:
                await message.reply_text("üéÅ –ò—Å–ø–æ–ª—å–∑—É–π: /gift @username")
                return
            target = args[1].replace("@", "")
            gift_list = GIFTS_ROMANTIC if random.choice([True, False]) else GIFTS_FUNNY
            gift = random.choice(gift_list)
            await message.reply_text(f"üéÅ @{message.from_user.username} –¥–∞—Ä–∏—Ç @{target} –ø–æ–¥–∞—Ä–æ–∫:\n{gift}")
    asyncio.create_task(process_gift())

# üöÄ –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("onbot", bot_on))
    app.add_handler(CommandHandler("offbot", bot_off))
    app.add_handler(CommandHandler("love", love_command))
    app.add_handler(CommandHandler("gift", gift_command))
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
