import os
import threading
import asyncio
import random
import re
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes

# üîë –¢–æ–∫–µ–Ω
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

print("‚úÖ TELEGRAM_TOKEN –Ω–∞–π–¥–µ–Ω, –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
OWNER_ID = 8486672898
LOG_CHANNEL_ID = -1003107269526
bot_active = True
updating = False
last_messages = {}
saved_troll_template = None
troll_stop = False

# üåê –ú–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
def run_web():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"LoveBot is running <3")

    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), Handler).serve_forever()

threading.Thread(target=run_web, daemon=True).start()

# üì§ –õ–æ–≥–∏
async def send_log(context: ContextTypes.DEFAULT_TYPE, text: str):
    try:
        await context.bot.send_message(chat_id=LOG_CHANNEL_ID, text=text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∞: {e}")

# ‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è
async def bot_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    if update.message is None or update.message.from_user.id != OWNER_ID:
        return
    bot_active = False
    await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω. –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã.")

async def bot_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    if update.message is None or update.message.from_user.id != OWNER_ID:
        return
    bot_active = True
    await update.message.reply_text("üîî –ë–æ—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω!")

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞
async def trollsave(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global saved_troll_template
    if update.message is None or update.message.from_user.id != OWNER_ID:
        return

    args = update.message.text.split(maxsplit=1)
    if len(args) < 2:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç: /trollsave <—Ç–µ–∫—Å—Ç>")
        return

    text = args[1].strip()

    # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
    if "\n" in text:
        saved_troll_template = text.split("\n")
    else:
        # —É–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º (–∫–∞–∂–¥—ã–µ 6 —Å–ª–æ–≤)
        words = text.split()
        saved_troll_template = []
        for i in range(0, len(words), 6):
            saved_troll_template.append(" ".join(words[i:i+6]))

    await update.message.reply_text("‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    await update.message.delete()

# ü™ú –ë—ã—Å—Ç—Ä—ã–π —Ç—Ä–æ–ª–ª–∏–Ω–≥ (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É)
async def troll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global troll_stop
    if update.message is None or update.message.from_user.id != OWNER_ID:
        return

    if not saved_troll_template:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /trollsave.")
        return

    troll_stop = False
    await update.message.delete()

    chat_id = update.message.chat.id
    for line in saved_troll_template:
        if troll_stop:
            break
        try:
            await context.bot.send_message(chat_id=chat_id, text=line)
        except Exception:
            continue
        await asyncio.sleep(0.01)  # —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏

# üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞
async def trollstop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global troll_stop
    if update.message is None or update.message.from_user.id != OWNER_ID:
        return
    troll_stop = True
    await update.message.reply_text("üõë –¢—Ä–æ–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# üì£ /all ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º
async def all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.from_user.id != OWNER_ID:
        return
    text = re.sub(r'^/all\s+', '', update.message.text, flags=re.I).strip()
    if not text:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    for chat_id in list(last_messages.keys()):
        try:
            await context.bot.send_message(chat_id=chat_id, text=text)
        except Exception:
            continue
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return
    last_messages[update.message.chat.id] = update.message.chat.id

    # –µ—Å–ª–∏ –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not bot_active and not update.message.text.startswith("/"):
        return

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(MessageHandler(filters.Regex(r'^/onbot$'), bot_on))
    app.add_handler(MessageHandler(filters.Regex(r'^/offbot$'), bot_off))
    app.add_handler(MessageHandler(filters.Regex(r'^/trollsave'), trollsave))
    app.add_handler(MessageHandler(filters.Regex(r'^/troll$'), troll))
    app.add_handler(MessageHandler(filters.Regex(r'^/trollstop$'), trollstop))
    app.add_handler(MessageHandler(filters.Regex(r'^/all'), all_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç—Ä–æ–ª–ª–∏–Ω–≥—É!")
    app.run_polling()
