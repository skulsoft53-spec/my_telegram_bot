import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes
import random

# ะขะพะบะตะฝ
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("ะัะธะฑะบะฐ: ะฟะตัะตะผะตะฝะฝะฐั ะพะบััะถะตะฝะธั TELEGRAM_TOKEN ะฝะต ัััะฐะฝะพะฒะปะตะฝะฐ!")
print("โ TELEGRAM_TOKEN ะฝะฐะนะดะตะฝ, ะฑะพั ะทะฐะฟััะบะฐะตััั...")

# ะะฐัััะพะนะบะธ
TARGET_USERNAMES = ["Habib471"]
SIGNATURE_USER = "Habib471"
SIGNATURE_TEXT = "ะะพะปัะฑะธ ะะฟะฐัะธ, ะบะฐะบ ะพะฝ ัะตะฑั"
bot_active = True
last_messages = {}
users_sent_messages = set()

# ะัะต ัะพะผะฐะฝัะธัะตัะบะธะต ััะฐะทั + ัััะบะธ
LOVE_PHRASES = [
    "ะขั โ ะผะพั ะฒะดะพัะฝะพะฒะตะฝะธะต, ะดััะฐะฝะธะต ะฒะตัะฝั ๐ธ",
    "ะก ัะพะฑะพะน ะบะฐะถะดัะน ะดะตะฝั โ ะผะฐะปะตะฝัะบะพะต ััะดะพ โจ",
    "ะขั โ ะผะพั ะผะตะปะพะดะธั ััะฐัััั ๐ถ",
    "ะ ัะฒะพะธั ะณะปะฐะทะฐั ะฒะธะถั ะฝะตะฑะพ ะธ ัะฒะตั ๐",
    "ะะฐะถะดะพะต ัะปะพะฒะพ ัะฒะพั โ ะฒะตัะตัะพะบ ะฒ ะดััะต ๐",
    "ะก ัะพะฑะพะน ัะธัะธะฝะฐ ะทะฒััะธั ะบะฐะบ ะผัะทัะบะฐ ๐ต",
    "ะขั โ ะดััะฐะฝะธะต ัะฒะตัะฐ ะฒ ัะตัะดัะต ๐",
    "ะะพะณะดะฐ ัั ััะดะพะผ, ะผะธั ะผัะณัะต ๐",
    "ะขั โ ัััะตะฝะฝะธะน ะปัั, ะพะทะฐััััะธะน ะดััั โ๏ธ",
    "ะก ัะพะฑะพะน ะบะฐะถะดัะน ะผะพะผะตะฝั โ ัััะฐะฝะธัะฐ ัะบะฐะทะบะธ ๐",
    "ะขั โ ะบะฐะฟะปั ะปัะฑะฒะธ ะฒ ะพะบะตะฐะฝะต ะถะธะทะฝะธ ๐",
    "ะ ัะฒะพะตะน ัะปัะฑะบะต ัะฟัััะฐะฝ ัะตะปัะน ะผะธั ๐น",
    "ะขั โ ะผะพะน ัะบะพัั ะธ ะฟะพะปัั ะพะดะฝะพะฒัะตะผะตะฝะฝะพ โ๏ธ๐๏ธ",
    "ะะฐะถะดะพะต ัััะพ ั ัะพะฑะพะน โ ะฟัะฐะทะดะฝะธะบ ะดััะธ ๐",
    "ะขั โ ะผัะณะบะธะน ัะฒะตั, ััะพ ะฒะตะดัั ัะบะฒะพะทั ััะผั ๐ก",
    "ะก ัะพะฑะพะน ะบะฐะถะดะฐั ะผะธะฝััะฐ ะฟัะตะฒัะฐัะฐะตััั ะฒ ะฒะพะปัะตะฑััะฒะพ โจ",
    "ะขั โ ัะผััะป, ะดะตะปะฐััะธะน ะฒัั ะพััะฐะปัะฝะพะต ะฒัะพัะพััะตะฟะตะฝะฝัะผ ๐ซถ",
    "ะก ัะพะฑะพะน ะดะฐะถะต ะดะพะถะดั ะบะฐะถะตััั ะผัะทัะบะพะน ๐ง๏ธ๐ถ",
    "ะขั โ ะผะพั ะฑะตัะบะพะฝะตัะฝะพััั ะฒ ะพะดะฝะพะผ ะฒะทะณะปัะดะต โพ๏ธ",
    "ะขั โ ัััะตะฝะฝะธะน ัะฐััะฒะตั, ะพะทะฐััััะธะน ะถะธะทะฝั โ๏ธ",
    "ะก ัะพะฑะพะน ัะตััะต ะดะฝะธ ััะฐะฝะพะฒัััั ััะบะธะผะธ ๐",
    "ะขั โ ะฟะตัะฝั, ะบะพัะพััั ัะพัะตััั ัะปััะฐัั ะฑะตัะบะพะฝะตัะฝะพ ๐ต",
    "ะะฐะถะดะพะต ะฟัะธะบะพัะฝะพะฒะตะฝะธะต ัะฒะพะตะน ััะบะธ โ ััะฟะพั ััะฐัััั ๐คฒ",
    "ะขั โ ะผะพะน ะผะฐัะบ ะฒ ะฑััะต ะถะธะทะฝะธ ๐ผ",
    "ะก ัะพะฑะพะน ัะพัะตััั ัะพะทะดะฐะฒะฐัั ะผะฐะปะตะฝัะบะธะต ััะดะตัะฐ ๐ช",
    "ะขั โ ะฐัะพะผะฐั ะฒะตัะฝั ะฒ ะผััะปัั ๐ธ",
    "ะะพะณะดะฐ ัั ัะผะตััััั, ะผะธั ะบะฐะถะตััั ะธะดะตะฐะปัะฝัะผ ๐",
    "ะขั โ ะผัะณะบะธะน ัะฒะตั ััะตะดะธ ััะผัะฐะบะฐ ๐",
    "ะก ัะพะฑะพะน ั ััะฒััะฒัั ัะตะฑั ัะตะปัะผ ๐งฉ",
    "ะขั โ ะปัะฑะธะผะฐั ัะปััะฐะนะฝะพััั, ััะฐะฒัะฐั ัะผััะปะพะผ ๐",
    "ะะฐะถะดะพะต ัะฒะพั ัะปะพะฒะพ โ ัััะพัะบะฐ ะฟะพัะผั ๐",
    "ะขั โ ะฒะดะพัะฝะพะฒะตะฝะธะต ะฒ ะผะพะผะตะฝัั ัะพะผะฝะตะฝะธะน ๐ซ",
    "ะก ัะพะฑะพะน ัะพัะตััั ะปะตัะตัั, ะดะฐะถะต ะตัะปะธ ะฝะพะณะธ ะฝะต ะบะฐัะฐัััั ะทะตะผะปะธ ๐๏ธ",
    "ะขั โ ัะธัะฐั ัะฐะดะพััั, ัะพะณัะตะฒะฐััะฐั ัะตัะดัะต ๐",
    "ะะพะณะดะฐ ัั ััะดะพะผ, ะผะธั ะดััะธั ะฒ ัะฝะธัะพะฝ ๐ฌ๏ธ",
    "ะขั โ ััะฟะพั ััะฐัััั ะฒ ัะธัะธะฝะต ๐คซ",
    "ะก ัะพะฑะพะน ั ััััั ะฒะธะดะตัั ะบัะฐัะพัั ะฒ ะบะฐะถะดะพะผ ะผะณะฝะพะฒะตะฝะธะธ ๐ท",
    "ะขั โ ะฝะตะถะฝะพััั, ะฟัะตะฒัะฐัะฐััะฐั ะพะฑัะดะตะฝะฝะพััั ะฒ ััะดะพ ๐",
    "ะะฐะถะดะพะต ัััะพ ั ัะพะฑะพะน โ ะฟะตัะฒัะน ะฒะดะพั ะฟะพัะปะต ัะฝะฐ ๐",
    "ะขั โ ะปััะธะบ ัะฒะตัะฐ, ัะฐััะตะบะฐััะธะน ะผัะฐะบ ๐",
    "ะก ัะพะฑะพะน ะถะธะทะฝั ะพะฑัะตัะฐะตั ัะธัะผ ๐ต",
    "ะขั โ ัะธัะฐั ะณะฐะฒะฐะฝั ะฒ ััะผะฝะพะผ ะผะธัะต โต",
    "ะะฐะถะดะพะต ะดะฒะธะถะตะฝะธะต ัะฒะพั โ ัะฐะฝะตั ะฒัะตะปะตะฝะฝะพะน ๐",
    "ะขั โ ะฒะดะพัะฝะพะฒะตะฝะธะต, ะฟัะตะฒัะฐัะฐััะตะต ะผััะปะธ ะฒ ะฟะพัะทะธั โ๏ธ",
    "ะก ัะพะฑะพะน ะดะฐะถะต ะผะพะปัะฐะฝะธะต ะทะฒััะธั ะบะฐะบ ะผัะทัะบะฐ ๐ถ",
    "ะขั โ ะผะพะน ะบะพัะผะพั, ะฟะพะปะฝัะน ัะฒะตัะปัั ะทะฒัะทะด ๐",
    "ะะพะณะดะฐ ัั ััะดะพะผ, ะฒัะตะผั ะทะฐะผะธัะฐะตั โณ",
    "ะขั โ ััะฟะปะพะต ะพะฑะปะฐะบะพ ะฒ ัะพะปะพะดะฝะพะผ ะผะธัะต โ๏ธ",
    "ะก ัะพะฑะพะน ะฟัะพัััะต ัะปะพะฒะฐ ะพะฑัะตัะฐัั ัะผััะป ๐",
    "ะขั โ ัััะตะฝะฝะธะน ะบะพัะต, ะฑะตะท ะบะพัะพัะพะณะพ ะดะตะฝั ะฝะต ะฝะฐัะธะฝะฐะตััั โ",
    "ะะฐะถะดะพะต ัะฒะพั ยซะฟัะธะฒะตัยป โ ัะพะปะฝะตัะฝัะน ะปัั ๐",
    "ะขั โ ัะธัะฐั ะผัะทัะบะฐ, ะทะฒััะฐัะฐั ัะพะปัะบะพ ะดะปั ะผะตะฝั ๐ถ",
    "ะก ัะพะฑะพะน ัะพัะตััั ะผะตััะฐัั ะธ ะฒะตัะธัั ๐",
    "ะขั โ ะปัะณะบะพััั, ัะฐััะฒะพััััะฐั ะทะฐะฑะพัั ๐ฌ๏ธ",
    "ะะฐะถะดะพะต ะดััะฐะฝะธะต ัะฒะพั โ ะฝะพะฒะฐั ะถะธะทะฝั ะดะปั ะดััะธ ๐ธ",
    "ะขั โ ะผัะณะบะธะน ัะฒะตั ะฒ ัะตัะดัะต ๐ก",
    "ะก ัะพะฑะพะน ะผะธั ััะฐะฝะพะฒะธััั ัััะต ๐",
    "ะขั โ ัะทะพั ััะฐัััั ะฒ ะฟะพะฒัะตะดะฝะตะฒะฝะพััะธ ๐จ",
    "ะะพะณะดะฐ ัะผะพััะธัั ะฝะฐ ะผะตะฝั, ะฒะธะถั ะฒัะตะปะตะฝะฝัั ๐",
    "ะขั โ ััั ะดะฐะถะต ะฒ ะฟะฐัะผััะฝัะต ะดะฝะธ ๐ก",
    "ะก ัะพะฑะพะน ะบะฐะถะดัะน ะดะตะฝั ะฟะพัะพะถ ะฝะฐ ัะบะฐะทะบั ๐ช",
    "ะขั โ ะปัะฑะธะผะฐั ะณะปะฐะฒะฐ ะบะฝะธะณะธ ะผะพะตะน ะถะธะทะฝะธ ๐",
    "ะะฐะถะดะพะต ัะปะพะฒะพ ัะฒะพั โ ะปะฐัะบะพะฒะพะต ะฟัะธะบะพัะฝะพะฒะตะฝะธะต ๐คฒ",
    "ะขั โ ัะฒะตั, ะฟัะตะฒัะฐัะฐััะธะน ััะผั ะฒ ัะฐััะฒะตั ๐",
    "ะก ัะพะฑะพะน ะพัััะฐั ะณะฐัะผะพะฝะธั ๐ฟ",
    "ะขั โ ะฒะตัะฝะฐั ะฒะตัะฝะฐ ะฒ ัะตัะดัะต ๐ธ",
    "ะะฐะถะดะพะต ะผะณะฝะพะฒะตะฝะธะต ั ัะพะฑะพะน โ ะดัะฐะณะพัะตะฝะฝะพััั ๐",
    "ะขั โ ัะธัะฐั ัะฐะดะพััั ััะตะดะธ ััะผะฐ ๐",
    "ะก ัะพะฑะพะน ะดะพะถะดั โ ัะธะผัะพะฝะธั ๐ง๏ธ๐ถ",
    "ะขั โ ะบะพะผะฟะฐั ะฒ ะถะธะทะฝะธ ๐งญ",
    "ะะพะณะดะฐ ััะดะพะผ, ัะพัะตััั ัะปัะฑะฐัััั ะฑะตะท ะฟัะธัะธะฝั ๐",
    "ะขั โ ัะตะปะตัั ะปะธััะฒั ะฒ ัะตัะดัะต ๐",
    "ะก ัะพะฑะพะน ัะพัั ะธะดัะธ ะฟะพ ะถะธะทะฝะธ ะทะฐ ััะบั ๐ค",
    "ะขั โ ะฒะดะพัะฝะพะฒะปัััะฐั ัะธัะธะฝะฐ ๐",
    "ะะฐะถะดะพะต ะฟัะธะบะพัะฝะพะฒะตะฝะธะต ัะฒะพั โ ัะธัะฝะธะต ัะพะปะฝัะฐ โ๏ธ",
    "ะขั โ ััะฟะพั, ะปะตัะฐัะธะน ัะพะผะฝะตะฝะธั ๐ธ",
    "ะก ัะพะฑะพะน ัะพัะตััั ัะฒะพัะธัั ะธ ะผะตััะฐัั ๐",
    "ะขั โ ัะผััะป, ะดะตะปะฐััะธะน ะถะธะทะฝั ะฝะฐััะพััะตะน ๐",
    "ะะพะณะดะฐ ัะผะตััััั, ะผะธั ะดะพะฑัะตะต ๐",
    "ะขั โ ัะธัะฐั ะณะฐะฒะฐะฝั ะธ ะฑััั ะพะดะฝะพะฒัะตะผะตะฝะฝะพ ๐",
    "ะก ัะพะฑะพะน ะบะฐะถะดัะน ะดะตะฝั โ ะบัะฐัะธะฒะฐั ะธััะพัะธั ๐",
    "ะขั โ ะผัะณะบะพะต ะฟัะธะบะพัะฝะพะฒะตะฝะธะต ัะฒะตัะฐ ๐",
    "ะะฐะถะดะพะต ัะปะพะฒะพ ัะฒะพั โ ะผะตะปะพะดะธั ััะฐัััั ๐ต",
    "ะขั โ ัััะตะฝะฝะธะน ัะฐััะฒะตั ะธ ะฒะตัะตัะฝัั ะทะฒะตะทะดะฐ ๐โญ",
    "ะก ัะพะฑะพะน ัะพัะตััั ะฑััั ะปัััะต ๐ธ",
    "ะขั โ ะฑะตัะบะพะฝะตัะฝะฐั ะผะตััะฐ ๐ซ",
    "ะะพะณะดะฐ ััะดะพะผ, ะบะฐะถะตััั, ััะพ ะฒัั ะฒะพะทะผะพะถะฝะพ ๐",
    "ะขั โ ะฝะตะถะฝะพััั, ะดะตะปะฐััะฐั ะผะธั ะผัะณัะต ๐",
    "ะก ัะพะฑะพะน ัะพัะตััั ะพััะฐะฝะฐะฒะปะธะฒะฐัััั ะฒ ะผะพะผะตะฝัะต โณ",
    "ะขั โ ะผะฐะปะตะฝัะบะพะต ััะดะพ ะบะฐะถะดัะน ะดะตะฝั ๐",
    "ะะฐะถะดะพะต ะผะณะฝะพะฒะตะฝะธะต ั ัะพะฑะพะน โ ะดััะฐะฝะธะต ัะฐะดะพััะธ ๐",
    "ะขั โ ะผัะทัะบะฐ, ััะพ ะฒะพะปะฝัะตั ัะตัะดัะต ๐ถ",
    "ะก ัะพะฑะพะน ะพะฑััะฝัะน ะดะตะฝั ััะฐะฝะพะฒะธััั ะฒะพะปัะตะฑะฝัะผ โจ",
    "ะขั โ ะผัะณะบะธะน ัะฒะตั ะฒ ะดััะต ะฝะฐะฒัะตะณะดะฐ ๐",
    "ะขั โ ะฒะดะพัะฝะพะฒะปัััะฐั ัะบะฐะทะบะฐ ๐",
    "ะก ัะพะฑะพะน ะผะธั ะพะฑัะตัะฐะตั ะฝะพะฒัะต ัะฒะตัะฐ ๐",
    "ะขั โ ัะธัะธะน ะพะบะตะฐะฝ ัะตะฟะปะฐ ะธ ัะฟะพะบะพะนััะฒะธั ๐",
    "ะะฐะถะดะพะต ะดะฒะธะถะตะฝะธะต ัะฒะพั โ ัะฐะฝะตั ะฒัะตะปะตะฝะฝะพะน ๐",
    "ะขั โ ะณะฐัะผะพะฝะธั, ะฟัะตะฒัะฐัะฐััะฐั ัะฐะพั ะฒ ัะผััะป ๐",
    "ะก ัะพะฑะพะน ะพัััะฐั ะฒะตัะฝะพััั โณ",
    "ะขั โ ะปััะธะบ ัะฒะตัะฐ, ะฝะธะบะพะณะดะฐ ะฝะต ะณะฐัะฝะตั ๐ก",
    "ะก ัะพะฑะพะน ัะพัะตััั ะปัะฑะธัั ะธ ัะฒะพัะธัั ะฑะตัะบะพะฝะตัะฝะพ ๐",
    "ะขั โ ะผะฐัะบ ัะตัะตะท ัััะดะฝะพััะธ ะถะธะทะฝะธ ๐ผ",
    "ะะพะณะดะฐ ัะผะพััะธัั, ะฒะธะถั ะฒัั ัะตะฝะฝะพะต ๐",
    "ะขั โ ัะตะปะตัั ััะฐัััั ะฒ ัะตัะดัะต ๐",
    "ะก ัะพะฑะพะน ััััั ัะฐะดะพะฒะฐัััั ะบะฐะถะดะพะผั ะผะณะฝะพะฒะตะฝะธั ๐ธ",
    "ะขั โ ะฒะดะพัะฝะพะฒะตะฝะธะต, ะพะถะธะฒะปัััะตะต ะผััะปะธ โ๏ธ",
]

LOVE_JOKES = [
    "ะขั ะบะฐะบ Wi-Fi โ ััะดะพะผ, ะธ ะฒัั ะธะดะตะฐะปัะฝะพ ๐",
    "ะขั โ ะฑะฐัะฐัะตะนะบะฐ, ะฑะตะท ัะตะฑั ัะตััั ะทะฐััะด ๐",
    "ะัะปะธ ะฑั ัั ะฑัะป ะบะพัะต, ะฝะต ะฟัะพััะฟะฐะปัั ะฑั ะฑะตะท ัะตะฑั โ",
    "ะขั ะบะฐะบ ะฟะฐัะพะปั: ัะปะพะถะฝัะน, ะฝะพ ะถะธะทะฝั ะฑะตะท ัะตะฑั ะฝะตะฒะพะทะผะพะถะฝะฐ ๐",
    "ะขั โ ะปัะฑะธะผะฐั ะฟะตัะฝั ะฝะฐ ะฟะพะฒัะพัะต ๐ถ",
]

# ะะตะฑ-ัะตัะฒะตั
def run_web():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"LoveBot is running <3")
    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), Handler).serve_forever()

threading.Thread(target=run_web, daemon=True).start()

# ะะพะผะฐะฝะดั
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "๐ ะัะธะฒะตั! ะฏ LoveBot by Apachi.\n"
        "ะฏ ัะตะฐะณะธััั ะฝะฐ ะฒัะฑัะฐะฝะฝัั ะฟะพะปัะทะพะฒะฐัะตะปะตะน ๐\n"
        "ะะพะผะฐะฝะดะฐ /love ะฟะพะบะฐะถะตั ะฒัะต ัะพะผะฐะฝัะธัะตัะบะธะต ััะฐะทั โจ\n"
        "ะะพะผะฐะฝะดั /on ะธ /off ะฒะบะปััะฐัั ะธ ะฒัะบะปััะฐัั ะฑะพัะฐ."
    )

async def bot_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    bot_active = True
    await update.message.reply_text("๐ ะะพั ะฒะบะปััะตะฝ!")

async def bot_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active
    bot_active = False
    await update.message.reply_text("๐ ะะพั ะฒัะบะปััะตะฝ!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_active:
        return
    message = update.message
    if not message or not message.from_user:
        return
    username = message.from_user.username
    users_sent_messages.add(username)
    if message.chat.type in ["group", "supergroup"]:
        if username in TARGET_USERNAMES:
            phrase = random.choice(LOVE_PHRASES + LOVE_JOKES)
            last_messages[username] = phrase
            text_to_send = phrase
            if username == SIGNATURE_USER:
                text_to_send += f"\n\n{SIGNATURE_TEXT}"
            await message.reply_text(text_to_send, reply_to_message_id=message.message_id)

# ะะพะผะฐะฝะดะฐ /love
async def love_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_active:
        return
    message = update.message
    args = message.text.split(maxsplit=1)
    target = args[1] if len(args) > 1 else message.from_user.username

    score = random.randint(0, 100)
    all_phrases = "\n".join(LOVE_PHRASES + LOVE_JOKES)
    text_to_send = f"๐ ะกะพะฒะผะตััะธะผะพััั ั {target}: {score}%\n\n{all_phrases}"

    if target == SIGNATURE_USER:
        text_to_send += f"\n\n{SIGNATURE_TEXT}"

    await message.reply_text(text_to_send)

# ะะปะฐะฒะฝะฐั ััะฝะบัะธั
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("love", love_command))
    app.add_handler(CommandHandler("on", bot_on))
    app.add_handler(CommandHandler("off", bot_off))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("๐ ะะพั ะทะฐะฟััะตะฝ ะธ ัะฐะฑะพัะฐะตั!")
    app.run_polling()

if __name__ == "__main__":
    main()
