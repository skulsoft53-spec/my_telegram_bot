import os
import random
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes

# ะะพะปัะทะพะฒะฐัะตะปะธ, ะดะปั ะบะพัะพััั ะฑัะดัั ัะพะผะฐะฝัะธัะตัะบะธะต ะพัะฒะตัั
TARGET_USERNAMES = ["Habib471"]  

# ะัะฐัะธะฒัะต ัะพะผะฐะฝัะธัะตัะบะธะต ััะฐะทั ๐
LOVE_PHRASES = [
    "ะขั โ ะผะพั ะฒะดะพัะฝะพะฒะตะฝะธะต, ะฝะตะถะฝะพะต ะบะฐะบ ะดััะฐะฝะธะต ะฒะตัะฝั ๐ท",
    "ะก ัะพะฑะพะน ะฒัั ะฒะพะบััะณ ะฝะฐะฟะพะปะฝัะตััั ัะผััะปะพะผ ๐ซ",
    "ะขั โ ะผะพั ะผะตะปะพะดะธั ััะฐัััั, ัะธัะฐั ะธ ะฒะตัะฝะฐั ๐ถ",
    "ะ ะบะฐะถะดะพะผ ะปััะต ัะพะปะฝัะฐ ั ะฒะธะถั ัะฒะพะน ัะฒะตั โ๏ธ",
    "ะขั โ ััะฟะพั ะฝะตะถะฝะพััะธ ะฒ ััะผะต ะผะธัะฐ ๐ธ",
    "ะะฐะถะดะฐั ะผััะปั ะพ ัะตะฑะต โ ะบะฐะบ ัััะตะฝะฝะธะน ัะฐััะฒะตั ๐",
    "ะก ัะพะฑะพะน ะดะฐะถะต ัะธัะธะฝะฐ ะทะฒััะธั ะฟัะตะบัะฐัะฝะตะต ๐",
    "ะขั โ ะดััะฐะฝะธะต ัะฒะตัะฐ ะฒ ะผะพัะผ ัะตัะดัะต โจ",
    "ะ ัะฒะพะธั ะณะปะฐะทะฐั ัะฟัััะฐะฝะพ ะฝะตะฑะพ ะธ ัะตะฟะปะพ ๐",
    "ะขั โ ะผะตััะฐ, ะบะพัะพัะฐั ััะฐะปะฐ ัะตะฐะปัะฝะพัััั ๐",
    "ะก ัะพะฑะพะน ะดะฐะถะต ะฒะตัะตั ะดััะธั ะปัะฑะพะฒัั ๐ฌ๏ธ",
    "ะขั โ ะฟัะธัะธะฝะฐ ัะปัะฑะฐัััั ะฑะตะท ะฟัะธัะธะฝั ๐",
    "ะขะฒะพั ะธะผั ะทะฒััะธั ะบะฐะบ ะฝะตะถะฝะฐั ะฟะตัะฝั ๐",
    "ะขั โ ัะฒะตัะปะฐั ะผััะปั ะฒะพ ะฒัะตั ะผะพะธั ะดะฝัั ๐ค๏ธ",
    "ะะพะณะดะฐ ัั ััะดะพะผ, ะฒัั ะพััะฐะปัะฝะพะต ัะตััะตั ะทะฝะฐัะตะฝะธะต ๐บ",
    "ะขั โ ะผะพะน ะดะพะผ, ะณะดะต ะฟะพะบะพะน ะธ ัะตะฟะปะพ ๐๏ธ",
    "ะะฐะถะดะฐั ะฒัััะตัะฐ ั ัะพะฑะพะน โ ะผะฐะปะตะฝัะบะพะต ััะดะพ โจ",
    "ะขั โ ัััะตะฝะฝะธะน ะปัั ะฒ ะผะพัะผ ัะตัะดัะต ๐",
    "ะก ัะพะฑะพะน ะดะฐะถะต ะทะฒัะทะดั ัะธััั ัััะต ๐",
    "ะขั โ ะบะฐะฟะปั ะปัะฑะฒะธ ะฒ ะพะบะตะฐะฝะต ะถะธะทะฝะธ ๐ง",
    "ะขั โ ะฒะดะพั, ะฑะตะท ะบะพัะพัะพะณะพ ะฝะต ะดััั ๐ซ",
    "ะขั โ ะพัะบะปะธะบ ัะตัะดัะฐ ะฝะฐ ะทะพะฒ ะปัะฑะฒะธ ๐",
    "ะขั โ ะฝะตะถะฝัะน ะพะณะพะฝั ะฒ ัะพะปะพะดะฝะพะผ ะผะธัะต ๐ฅ",
    "ะขั โ ะผะพั ัะฐะผะฐั ะบัะฐัะธะฒะฐั ัะปััะฐะนะฝะพััั ๐ซ",
    "ะขั โ ัะฒะตั ะฒ ะบะฐะถะดะพะผ ะฒะทะณะปัะดะต ๐",
    "ะขั โ ัััะพ, ะบะพัะพัะพะต ะฝะต ัะพัะตััั ะพัะฟััะบะฐัั ๐",
    "ะขั โ ะฟัะธัะธะฝะฐ ะผะพะตะณะพ ะฒะดะพัะฐ ะธ ัะปัะฑะบะธ ๐",
    "ะขั โ ะผัะณะบะพััั ะฒ ััะพะผ ะผะธัะต ๐",
    "ะขั โ ะผัะทัะบะฐ ะฒ ะผะพะธั ะผััะปัั ๐ถ",
    "ะขั โ ััะฐัััะต, ััะพ ััะฐะปะพ ัะตะฐะปัะฝะพัััั ๐",
    "ะก ัะพะฑะพะน ะผะธั ัะฒะตัะปะตะต ะธ ัะฐะดะพััะฝะตะต โ๏ธ",
]

# ะะพะดะฟะธัะธ ะบ ัะพะผะฐะฝัะธัะตัะบะธะผ ัะพะพะฑัะตะฝะธัะผ
SIGNATURES = [
    "ะะฟะฐัะธ ัะตะฑั ะปัะฑะธั โค๏ธ",
    "ะขั ะฒ ัะตัะดัะต ะะฟะฐัะธ ะฝะฐะฒัะตะณะดะฐ ๐",
    "ะะพะปัะฑะธ ะะฟะฐัะธ, ะบะฐะบ ะพะฝ ัะตะฑั ๐",
    "ะั ะะฟะฐัะธ ั ัะตะฟะปะพะผ ๐",
]

# ะะธะฝะธ-ะฒะตะฑ-ัะตัะฒะตั ะดะปั Render/Heroku
def run_web():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"LoveBot is running <3")
    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), Handler).serve_forever()

threading.Thread(target=run_web, daemon=True).start()

# ะะพัะปะตะดะฝะตะต ัะพะพะฑัะตะฝะธะต ะดะปั ะบะฐะถะดะพะณะพ ะฟะพะปัะทะพะฒะฐัะตะปั, ััะพะฑั ะฝะต ะฟะพะฒัะพััะปะพัั
last_messages = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "๐ ะัะธะฒะตั! ะฏ LoveBot by Apachi.\n"
        "ะฏ ะพัะฒะตัะฐั ะฝะฐ ัะพะพะฑัะตะฝะธั ะฒัะฑัะฐะฝะฝัั ะฟะพะปัะทะพะฒะฐัะตะปะตะน ๐\n"
        "ะะพะผะฐะฝะดะพะน /love ะผะพะถะฝะพ ะฟัะพะฒะตัะธัั ัะพะฒะผะตััะธะผะพััั!"
    )

# ะะฑัะฐะฑะพัะบะฐ ัะพะพะฑัะตะฝะธะน
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or not message.from_user:
        return
    username = message.from_user.username
    phrase = None
    if message.chat.type in ["group", "supergroup"]:
        # ะขะพะปัะบะพ ัะพะผะฐะฝัะธัะตัะบะธะน ะฟะพะปัะทะพะฒะฐัะตะปั
        if username in TARGET_USERNAMES and random.random() < 0.3:  # 30% ะฒะตัะพััะฝะพััั ะพัะฒะตัะฐ
            while True:
                phrase = random.choice(LOVE_PHRASES)
                if last_messages.get(username) != phrase:
                    last_messages[username] = phrase
                    break
        if phrase:
            response = phrase
            # ะะพะดะฟะธัั ะบ ัะพะผะฐะฝัะธัะตัะบะธะผ ัะพะพะฑัะตะฝะธัะผ ั ะฒะตัะพััะฝะพัััั 30%
            if username in TARGET_USERNAMES and random.random() < 0.3:
                response += f"\n\n{random.choice(SIGNATURES)}"
            await message.reply_text(response, reply_to_message_id=message.message_id)

# ะะพะผะฐะฝะดะฐ /love ะดะปั ะฒัะตั ะฟะพะปัะทะพะฒะฐัะตะปะตะน
async def love_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or not message.text:
        return
    args = message.text.split(maxsplit=1)
    target = args[1] if len(args) > 1 else message.from_user.username
    score = random.randint(50, 100)
    await message.reply_text(f"๐ ะกะพะฒะผะตััะธะผะพััั ั {target}: {score}%")

# ะะฐะฟััะบ ะฑะพัะฐ
async def main():
    token = "8456574639:AAF67RT8myD5CNe8RmiHh9DrbT-ZkwvstDc"  # ะััะฐะฒะปะตะฝ ะฝะฐะฟััะผัั
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("love", love_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
