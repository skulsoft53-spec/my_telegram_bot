import os
import threading
import asyncio
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import random

# üîë –¢–æ–∫–µ–Ω
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
print("‚úÖ TELEGRAM_TOKEN –Ω–∞–π–¥–µ–Ω, –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TARGET_USERNAMES = ["Habib471"]
SIGNATURE_USER = "Habib471"
SIGNATURE_TEXT = "–ü–æ–ª—é–±–∏ –ê–ø–∞—á–∏, –∫–∞–∫ –æ–Ω —Ç–µ–±—è üíû"
OWNER_USERNAME = "bxuwy"
bot_active = True  # –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ
bot_updating = False  # —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
last_messages = {}

# üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
MAX_CONCURRENT_TASKS = 10
task_semaphore = asyncio.Semaphore(MAX_CONCURRENT_TASKS)

# üìå –¢—Ä–æ–ª–ª–∏–Ω–≥
saved_troll_template = None
troll_stop = False

# üíñ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã (–¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π)
LOVE_PHRASES = ["–¢—ã –º–Ω–µ –¥–æ—Ä–æ–≥", "–Ø —Ä–∞–¥, —á—Ç–æ —Ç—ã –µ—Å—Ç—å", "–¢—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è", "–¢—ã –º–æ–π —á–µ–ª–æ–≤–µ–∫"]
SPECIAL_PHRASES = ["–° —Ç–æ–±–æ–π –¥–∞–∂–µ —Ç–∏—à–∏–Ω–∞ –∑–≤—É—á–∏—Ç –∫—Ä–∞—Å–∏–≤–æ üí´", "–¢—ã ‚Äî –ø—Ä–∏—á–∏–Ω–∞ —É–ª—ã–±–∫–∏ –ê–ø–∞—á–∏ üíñ"]

GIFTS_ROMANTIC = ["üíê –ë—É–∫–µ—Ç —Å–ª–æ–≤ –∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ–∂–Ω–æ—Å—Ç–∏", "üç´ –®–æ–∫–æ–ª–∞–¥ –∏–∑ —á—É–≤—Å—Ç–≤–∞ —Å–∏–º–ø–∞—Ç–∏–∏"]
GIFTS_FUNNY = ["üçï –û–¥–∏–Ω –∫—É—Å–æ—á–µ–∫ –ª—é–±–≤–∏ –∏ —Ç—Ä–∏ –∫—Ä–æ—à–∫–∏ –∑–∞–±–æ—Ç—ã", "üçü –ö–∞—Ä—Ç–æ—à–∫—É —Å —Å–æ—É—Å–æ–º —Å–∏–º–ø–∞—Ç–∏–∏"]

# üåê –ú–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä
def run_web():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"LoveBot is running <3")
    port = int(os.environ.get("PORT", 10000))
    HTTPServer(("0.0.0.0", port), Handler).serve_forever()

threading.Thread(target=run_web, daemon=True).start()

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def check_update_mode(update: Update):
    if bot_updating:
        await update.message.reply_text("‚ö†Ô∏è –Ø –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return True
    return False

# üí¨ –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíû –ü—Ä–∏–≤–µ—Ç! –Ø LoveBot by Apachi.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/love ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å üíò\n"
        "/gift ‚Äî –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ\n"
        "/trollsave ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω üìù\n"
        "/troll ‚Äî –ø–µ—á–∞—Ç—å —à–∞–±–ª–æ–Ω–∞ –ª–µ—Å–µ–Ω–∫–æ–π ü™ú (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/trollstop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞ üõë\n"
        "/offbot ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)\n"
        "/onbot ‚Äî –≤–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)"
    )

# üî¥ /offbot ‚Äî —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def offbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_updating
    if update.message.from_user.username != OWNER_USERNAME:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    bot_updating = True
    await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# üü¢ /onbot ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def onbot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_updating
    if update.message.from_user.username != OWNER_USERNAME:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    bot_updating = False
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω! –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç.")

# üíò /love
async def love_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_update_mode(update):
        return
    async def process_love():
        async with task_semaphore:
            message = update.message
            args = message.text.split(maxsplit=1)
            target = args[1].replace("@", "") if len(args) > 1 else message.from_user.username
            final_score = random.randint(0, 100)
            phrase = random.choice(SPECIAL_PHRASES if target.lower() == SIGNATURE_USER.lower() else LOVE_PHRASES)
            bar_length = 10
            filled_length = final_score * bar_length // 100
            bar = "‚ù§Ô∏è" * filled_length + "üñ§" * (bar_length - filled_length)
            result_text = f"üíû @{message.from_user.username} üíñ @{target}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {final_score}% [{bar}]\n{phrase}"
            if target.lower() == SIGNATURE_USER.lower():
                result_text += f"\n\n{SIGNATURE_TEXT}"
            await message.reply_text(result_text)
    asyncio.create_task(process_love())

# üéÅ /gift
async def gift_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_update_mode(update):
        return
    async def process_gift():
        async with task_semaphore:
            message = update.message
            args = message.text.split(maxsplit=1)
            if len(args) < 2:
                await message.reply_text("üéÅ –ò—Å–ø–æ–ª—å–∑—É–π: /gift @username")
                return
            target = args[1].replace("@", "")
            gift_list = GIFTS_ROMANTIC if random.choice([True, False]) else GIFTS_FUNNY
            gift = random.choice(gift_list)
            await message.reply_text(f"üéÅ @{message.from_user.username} –¥–∞—Ä–∏—Ç @{target} –ø–æ–¥–∞—Ä–æ–∫:\n{gift}")
    asyncio.create_task(process_gift())

# üíæ /trollsave ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω
async def trollsave_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_update_mode(update):
        return
    global saved_troll_template
    if update.message.from_user.username != OWNER_USERNAME:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    args = update.message.text.split(maxsplit=1)
    if len(args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /trollsave <—Ç–µ–∫—Å—Ç —Å \\n>")
        return
    saved_troll_template = args[1].split("\\n")
    await update.message.reply_text(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å {len(saved_troll_template)} —Å—Ç—Ä–æ–∫–∞–º–∏.")

# ü™ú /troll ‚Äî –ø–µ—á–∞—Ç—å –ª–µ—Å–µ–Ω–∫–æ–π
async def troll_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_update_mode(update):
        return
    global troll_stop
    if update.message.from_user.username != OWNER_USERNAME:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    if not saved_troll_template:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /trollsave <—Ç–µ–∫—Å—Ç>")
        return

    async def send_ladder():
        global troll_stop
        async with task_semaphore:
            troll_stop = False
            for line in saved_troll_template:
                if troll_stop:
                    break
                await update.message.reply_text(line)
                await asyncio.sleep(0.1)

    asyncio.create_task(send_ladder())

# üõë /trollstop
async def trollstop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_update_mode(update):
        return
    global troll_stop
    if update.message.from_user.username != OWNER_USERNAME:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    troll_stop = True
    await update.message.reply_text("üõë –¢—Ä–æ–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("love", love_command))
    app.add_handler(CommandHandler("gift", gift_command))
    app.add_handler(CommandHandler("offbot", offbot))
    app.add_handler(CommandHandler("onbot", onbot))
    app.add_handler(CommandHandler("trollsave", trollsave_command))
    app.add_handler(CommandHandler("troll", troll_command))
    app.add_handler(CommandHandler("trollstop", trollstop_command))
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
